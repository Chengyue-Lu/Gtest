
Gtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001084  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c68  08007c68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c70  08007c70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  08007c84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08007c84  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001521c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003113  00000000  00000000  0003529b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  000383b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de8  00000000  00000000  000395a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e402  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164c8  00000000  00000000  0005878a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27f1  00000000  00000000  0006ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049a0  00000000  00000000  00131444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00135de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006bcc 	.word	0x08006bcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006bcc 	.word	0x08006bcc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Total_Init>:
#include "Init.h"
extern int rxkey;
extern Total total;
void Total_Init(Total *total) // 全局结构体初始化
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    music_init(&total->play);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fb31 	bl	8000b86 <music_init>
    key_init(&total->keyboard);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3344      	adds	r3, #68	; 0x44
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f881 	bl	8000630 <key_init>
    mustorage_init(&total->musicall);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	334c      	adds	r3, #76	; 0x4c
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fb5c 	bl	8000bf0 <mustorage_init>
    keyplay_init(&total->keyplay);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3338      	adds	r3, #56	; 0x38
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fd73 	bl	8001028 <keyplay_init>
    total->task = wait;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <MX_GPIO_Init+0xd4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a2e      	ldr	r2, [pc, #184]	; (8000628 <MX_GPIO_Init+0xd4>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <MX_GPIO_Init+0xd4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b29      	ldr	r3, [pc, #164]	; (8000628 <MX_GPIO_Init+0xd4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a28      	ldr	r2, [pc, #160]	; (8000628 <MX_GPIO_Init+0xd4>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b26      	ldr	r3, [pc, #152]	; (8000628 <MX_GPIO_Init+0xd4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b23      	ldr	r3, [pc, #140]	; (8000628 <MX_GPIO_Init+0xd4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a22      	ldr	r2, [pc, #136]	; (8000628 <MX_GPIO_Init+0xd4>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_GPIO_Init+0xd4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11
 80005b2:	2200      	movs	r2, #0
 80005b4:	f641 410c 	movw	r1, #7180	; 0x1c0c
 80005b8:	481c      	ldr	r0, [pc, #112]	; (800062c <MX_GPIO_Init+0xd8>)
 80005ba:	f002 f841 	bl	8002640 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f002 f83b 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <MX_GPIO_Init+0xd8>)
 80005e0:	f001 fe94 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11
 80005e4:	f641 430c 	movw	r3, #7180	; 0x1c0c
 80005e8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <MX_GPIO_Init+0xd8>)
 80005fe:	f001 fe85 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000602:	2320      	movs	r3, #32
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f001 fe76 	bl	800230c <HAL_GPIO_Init>

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	48000800 	.word	0x48000800

08000630 <key_init>:
#include "main.h"
extern Total total;
extern int temp;
extern int flag_key;
void key_init(Keyboard *keyboard) // 键盘结构体初始化函数
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    keyboard->key_p = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <key_deal>:
void key_deal(Keyboard *keyboard) // 针对不同场景下收到的键盘信息进行不同响应
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    switch (total.task)
 8000654:	4b79      	ldr	r3, [pc, #484]	; (800083c <key_deal+0x1f0>)
 8000656:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800065a:	2b02      	cmp	r3, #2
 800065c:	f000 808a 	beq.w	8000774 <key_deal+0x128>
 8000660:	2b02      	cmp	r3, #2
 8000662:	f300 80dc 	bgt.w	800081e <key_deal+0x1d2>
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <key_deal+0x24>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d00a      	beq.n	8000684 <key_deal+0x38>
            total.keyplay.keyhigh = 1;
        if (total.keyplay.keyhigh < 1)
            total.keyplay.keyhigh = 21;
        break;
    default:
        break;
 800066e:	e0d6      	b.n	800081e <key_deal+0x1d2>
        if (keyboard->key_p == 1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	f040 80d4 	bne.w	8000822 <key_deal+0x1d6>
            total.task = music;
 800067a:	4b70      	ldr	r3, [pc, #448]	; (800083c <key_deal+0x1f0>)
 800067c:	2201      	movs	r2, #1
 800067e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 8000682:	e0ce      	b.n	8000822 <key_deal+0x1d6>
        if (keyboard->key_p == 1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d106      	bne.n	800069a <key_deal+0x4e>
            total.task = play;
 800068c:	4b6b      	ldr	r3, [pc, #428]	; (800083c <key_deal+0x1f0>)
 800068e:	2202      	movs	r2, #2
 8000690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            music_init(&total.play);
 8000694:	4869      	ldr	r0, [pc, #420]	; (800083c <key_deal+0x1f0>)
 8000696:	f000 fa76 	bl	8000b86 <music_init>
        if (keyboard->key_p == 2)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d117      	bne.n	80006d2 <key_deal+0x86>
            if (total.play.state == sing)
 80006a2:	4b66      	ldr	r3, [pc, #408]	; (800083c <key_deal+0x1f0>)
 80006a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d107      	bne.n	80006bc <key_deal+0x70>
                temp = total.play.num_music;
 80006ac:	4b63      	ldr	r3, [pc, #396]	; (800083c <key_deal+0x1f0>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	4a63      	ldr	r2, [pc, #396]	; (8000840 <key_deal+0x1f4>)
 80006b2:	6013      	str	r3, [r2, #0]
                music_start(&total.play, 0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4861      	ldr	r0, [pc, #388]	; (800083c <key_deal+0x1f0>)
 80006b8:	f000 fb8c 	bl	8000dd4 <music_start>
            if (total.play.state == stop)
 80006bc:	4b5f      	ldr	r3, [pc, #380]	; (800083c <key_deal+0x1f0>)
 80006be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d105      	bne.n	80006d2 <key_deal+0x86>
                music_start(&total.play, temp);
 80006c6:	4b5e      	ldr	r3, [pc, #376]	; (8000840 <key_deal+0x1f4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	485b      	ldr	r0, [pc, #364]	; (800083c <key_deal+0x1f0>)
 80006ce:	f000 fb81 	bl	8000dd4 <music_start>
        if (keyboard->key_p == 3)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d111      	bne.n	80006fe <key_deal+0xb2>
            temp = total.play.num_music + 1;
 80006da:	4b58      	ldr	r3, [pc, #352]	; (800083c <key_deal+0x1f0>)
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	3301      	adds	r3, #1
 80006e0:	4a57      	ldr	r2, [pc, #348]	; (8000840 <key_deal+0x1f4>)
 80006e2:	6013      	str	r3, [r2, #0]
            if (temp > 3)
 80006e4:	4b56      	ldr	r3, [pc, #344]	; (8000840 <key_deal+0x1f4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	dd02      	ble.n	80006f2 <key_deal+0xa6>
                temp = 1;
 80006ec:	4b54      	ldr	r3, [pc, #336]	; (8000840 <key_deal+0x1f4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
            music_start(&total.play, temp);
 80006f2:	4b53      	ldr	r3, [pc, #332]	; (8000840 <key_deal+0x1f4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <key_deal+0x1f0>)
 80006fa:	f000 fb6b 	bl	8000dd4 <music_start>
        if (keyboard->key_p == 4)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d111      	bne.n	800072a <key_deal+0xde>
            temp = total.play.num_music - 1;
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <key_deal+0x1f0>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	3b01      	subs	r3, #1
 800070c:	4a4c      	ldr	r2, [pc, #304]	; (8000840 <key_deal+0x1f4>)
 800070e:	6013      	str	r3, [r2, #0]
            if (temp < 1)
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <key_deal+0x1f4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dc02      	bgt.n	800071e <key_deal+0xd2>
                temp = 3;
 8000718:	4b49      	ldr	r3, [pc, #292]	; (8000840 <key_deal+0x1f4>)
 800071a:	2203      	movs	r2, #3
 800071c:	601a      	str	r2, [r3, #0]
            music_start(&total.play, temp);
 800071e:	4b48      	ldr	r3, [pc, #288]	; (8000840 <key_deal+0x1f4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	4845      	ldr	r0, [pc, #276]	; (800083c <key_deal+0x1f0>)
 8000726:	f000 fb55 	bl	8000dd4 <music_start>
        if (keyboard->key_p == 5)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b05      	cmp	r3, #5
 8000730:	d104      	bne.n	800073c <key_deal+0xf0>
            total.play.volume++;
 8000732:	4b42      	ldr	r3, [pc, #264]	; (800083c <key_deal+0x1f0>)
 8000734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000736:	3301      	adds	r3, #1
 8000738:	4a40      	ldr	r2, [pc, #256]	; (800083c <key_deal+0x1f0>)
 800073a:	6293      	str	r3, [r2, #40]	; 0x28
        if (keyboard->key_p == 6)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b06      	cmp	r3, #6
 8000742:	d104      	bne.n	800074e <key_deal+0x102>
            total.play.volume--;
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <key_deal+0x1f0>)
 8000746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000748:	3b01      	subs	r3, #1
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <key_deal+0x1f0>)
 800074c:	6293      	str	r3, [r2, #40]	; 0x28
        if (keyboard->key_p == 7)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d104      	bne.n	8000760 <key_deal+0x114>
            total.play.speed++;
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <key_deal+0x1f0>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	3301      	adds	r3, #1
 800075c:	4a37      	ldr	r2, [pc, #220]	; (800083c <key_deal+0x1f0>)
 800075e:	62d3      	str	r3, [r2, #44]	; 0x2c
        if (keyboard->key_p == 8)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b08      	cmp	r3, #8
 8000766:	d15e      	bne.n	8000826 <key_deal+0x1da>
            total.play.speed--;
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <key_deal+0x1f0>)
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	3b01      	subs	r3, #1
 800076e:	4a33      	ldr	r2, [pc, #204]	; (800083c <key_deal+0x1f0>)
 8000770:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8000772:	e058      	b.n	8000826 <key_deal+0x1da>
        if (keyboard->key_p == 1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d103      	bne.n	8000784 <key_deal+0x138>
            total.task = music;
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <key_deal+0x1f0>)
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if (keyboard->key_p == 3)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d104      	bne.n	8000796 <key_deal+0x14a>
            total.keyplay.keyhigh++;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <key_deal+0x1f0>)
 800078e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000790:	3301      	adds	r3, #1
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <key_deal+0x1f0>)
 8000794:	6393      	str	r3, [r2, #56]	; 0x38
        if (keyboard->key_p == 4)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d104      	bne.n	80007a8 <key_deal+0x15c>
            total.keyplay.keyhigh--;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <key_deal+0x1f0>)
 80007a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <key_deal+0x1f0>)
 80007a6:	6393      	str	r3, [r2, #56]	; 0x38
        if (keyboard->key_p == 2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d103      	bne.n	80007b8 <key_deal+0x16c>
            flag_key = total.keyplay.time;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <key_deal+0x1f0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a23      	ldr	r2, [pc, #140]	; (8000844 <key_deal+0x1f8>)
 80007b6:	6013      	str	r3, [r2, #0]
        if (keyboard->key_p == 5)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b05      	cmp	r3, #5
 80007be:	d104      	bne.n	80007ca <key_deal+0x17e>
            total.keyplay.volume++;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <key_deal+0x1f0>)
 80007c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <key_deal+0x1f0>)
 80007c8:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (keyboard->key_p == 6)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d104      	bne.n	80007dc <key_deal+0x190>
            total.keyplay.volume--;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <key_deal+0x1f0>)
 80007d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <key_deal+0x1f0>)
 80007da:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (keyboard->key_p == 7)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d104      	bne.n	80007ee <key_deal+0x1a2>
            total.keyplay.time++;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <key_deal+0x1f0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <key_deal+0x1f0>)
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
        if (keyboard->key_p == 8)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b08      	cmp	r3, #8
 80007f4:	d104      	bne.n	8000800 <key_deal+0x1b4>
            total.keyplay.time--;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <key_deal+0x1f0>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <key_deal+0x1f0>)
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
        if (total.keyplay.keyhigh > 21)
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <key_deal+0x1f0>)
 8000802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000804:	2b15      	cmp	r3, #21
 8000806:	dd02      	ble.n	800080e <key_deal+0x1c2>
            total.keyplay.keyhigh = 1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <key_deal+0x1f0>)
 800080a:	2201      	movs	r2, #1
 800080c:	639a      	str	r2, [r3, #56]	; 0x38
        if (total.keyplay.keyhigh < 1)
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <key_deal+0x1f0>)
 8000810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000812:	2b00      	cmp	r3, #0
 8000814:	dc09      	bgt.n	800082a <key_deal+0x1de>
            total.keyplay.keyhigh = 21;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <key_deal+0x1f0>)
 8000818:	2215      	movs	r2, #21
 800081a:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800081c:	e005      	b.n	800082a <key_deal+0x1de>
        break;
 800081e:	bf00      	nop
 8000820:	e004      	b.n	800082c <key_deal+0x1e0>
        break;
 8000822:	bf00      	nop
 8000824:	e002      	b.n	800082c <key_deal+0x1e0>
        break;
 8000826:	bf00      	nop
 8000828:	e000      	b.n	800082c <key_deal+0x1e0>
        break;
 800082a:	bf00      	nop
    }
    keyboard->key_p = 0;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000028 	.word	0x20000028
 8000840:	200000d4 	.word	0x200000d4
 8000844:	200000d8 	.word	0x200000d8

08000848 <lcd_display>:
#include "lcd.h"
extern char buffer[8];
extern Total total;
void lcd_display() // 根据不同场景进行LCD显示内容更新函数
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    LCD_clear();
 800084c:	f000 fc9c 	bl	8001188 <LCD_clear>
    switch (total.task)
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <lcd_display+0xfc>)
 8000852:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000856:	2b02      	cmp	r3, #2
 8000858:	d04c      	beq.n	80008f4 <lcd_display+0xac>
 800085a:	2b02      	cmp	r3, #2
 800085c:	dc6f      	bgt.n	800093e <lcd_display+0xf6>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <lcd_display+0x20>
 8000862:	2b01      	cmp	r3, #1
 8000864:	d006      	beq.n	8000874 <lcd_display+0x2c>
        LCD_write_number(60, 2, total.keyplay.volume);
        LCD_write_english_string(0, 3, key2);
        LCD_write_number(60, 3, total.keyplay.time);
        break;
    default:
        break;
 8000866:	e06a      	b.n	800093e <lcd_display+0xf6>
        LCD_write_english_string(0, 2, welcome1);
 8000868:	4a37      	ldr	r2, [pc, #220]	; (8000948 <lcd_display+0x100>)
 800086a:	2102      	movs	r1, #2
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fd31 	bl	80012d4 <LCD_write_english_string>
        break;
 8000872:	e065      	b.n	8000940 <lcd_display+0xf8>
        if (total.play.num_music == 1)
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <lcd_display+0xfc>)
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <lcd_display+0x3e>
            LCD_write_english_string(0, 0, &total.musicall.music1.music_name);
 800087c:	4a33      	ldr	r2, [pc, #204]	; (800094c <lcd_display+0x104>)
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fd27 	bl	80012d4 <LCD_write_english_string>
        if (total.play.num_music == 2)
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <lcd_display+0xfc>)
 8000888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088a:	2b02      	cmp	r3, #2
 800088c:	d104      	bne.n	8000898 <lcd_display+0x50>
            LCD_write_english_string(0, 0, &total.musicall.music2.music_name);
 800088e:	4a30      	ldr	r2, [pc, #192]	; (8000950 <lcd_display+0x108>)
 8000890:	2100      	movs	r1, #0
 8000892:	2000      	movs	r0, #0
 8000894:	f000 fd1e 	bl	80012d4 <LCD_write_english_string>
        if (total.play.num_music == 3)
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <lcd_display+0xfc>)
 800089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089c:	2b03      	cmp	r3, #3
 800089e:	d104      	bne.n	80008aa <lcd_display+0x62>
            LCD_write_english_string(0, 0, &total.musicall.music3.music_name);
 80008a0:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <lcd_display+0x10c>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 fd15 	bl	80012d4 <LCD_write_english_string>
        LCD_write_english_string(0, 1, mu3);
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <lcd_display+0x110>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 fd10 	bl	80012d4 <LCD_write_english_string>
        LCD_write_number(60, 1, total.play.num_music);
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <lcd_display+0xfc>)
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	461a      	mov	r2, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	203c      	movs	r0, #60	; 0x3c
 80008be:	f000 fcc3 	bl	8001248 <LCD_write_number>
        LCD_write_english_string(0, 2, mu1);
 80008c2:	4a26      	ldr	r2, [pc, #152]	; (800095c <lcd_display+0x114>)
 80008c4:	2102      	movs	r1, #2
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fd04 	bl	80012d4 <LCD_write_english_string>
        LCD_write_number(60, 2, total.play.volume);
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <lcd_display+0xfc>)
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	461a      	mov	r2, r3
 80008d2:	2102      	movs	r1, #2
 80008d4:	203c      	movs	r0, #60	; 0x3c
 80008d6:	f000 fcb7 	bl	8001248 <LCD_write_number>
        LCD_write_english_string(0, 3, mu2);
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <lcd_display+0x118>)
 80008dc:	2103      	movs	r1, #3
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 fcf8 	bl	80012d4 <LCD_write_english_string>
        LCD_write_number(60, 3, total.play.speed);
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <lcd_display+0xfc>)
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	461a      	mov	r2, r3
 80008ea:	2103      	movs	r1, #3
 80008ec:	203c      	movs	r0, #60	; 0x3c
 80008ee:	f000 fcab 	bl	8001248 <LCD_write_number>
        break;
 80008f2:	e025      	b.n	8000940 <lcd_display+0xf8>
        LCD_write_english_string(0, 1, key3);
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <lcd_display+0x11c>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fceb 	bl	80012d4 <LCD_write_english_string>
        LCD_write_number(60, 1, total.keyplay.keyhigh);
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <lcd_display+0xfc>)
 8000900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000902:	461a      	mov	r2, r3
 8000904:	2101      	movs	r1, #1
 8000906:	203c      	movs	r0, #60	; 0x3c
 8000908:	f000 fc9e 	bl	8001248 <LCD_write_number>
        LCD_write_english_string(0, 2, key1);
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <lcd_display+0x120>)
 800090e:	2102      	movs	r1, #2
 8000910:	2000      	movs	r0, #0
 8000912:	f000 fcdf 	bl	80012d4 <LCD_write_english_string>
        LCD_write_number(60, 2, total.keyplay.volume);
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <lcd_display+0xfc>)
 8000918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800091a:	461a      	mov	r2, r3
 800091c:	2102      	movs	r1, #2
 800091e:	203c      	movs	r0, #60	; 0x3c
 8000920:	f000 fc92 	bl	8001248 <LCD_write_number>
        LCD_write_english_string(0, 3, key2);
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <lcd_display+0x124>)
 8000926:	2103      	movs	r1, #3
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fcd3 	bl	80012d4 <LCD_write_english_string>
        LCD_write_number(60, 3, total.keyplay.time);
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <lcd_display+0xfc>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	461a      	mov	r2, r3
 8000934:	2103      	movs	r1, #3
 8000936:	203c      	movs	r0, #60	; 0x3c
 8000938:	f000 fc86 	bl	8001248 <LCD_write_number>
        break;
 800093c:	e000      	b.n	8000940 <lcd_display+0xf8>
        break;
 800093e:	bf00      	nop
    }
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000028 	.word	0x20000028
 8000948:	08006bec 	.word	0x08006bec
 800094c:	20000074 	.word	0x20000074
 8000950:	20000094 	.word	0x20000094
 8000954:	200000b4 	.word	0x200000b4
 8000958:	08006c04 	.word	0x08006c04
 800095c:	08006bf4 	.word	0x08006bf4
 8000960:	08006bfc 	.word	0x08006bfc
 8000964:	08006c1c 	.word	0x08006c1c
 8000968:	08006c0c 	.word	0x08006c0c
 800096c:	08006c14 	.word	0x08006c14

08000970 <loop>:
#include "key.h"
#include "lcd.h"
extern Total total;
extern int flag_key;
void loop() // 主循环函数，用于计时以及函数的分模块运行
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    if (strSysTimer.bTag1ms == TRUE)
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <loop+0x80>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d104      	bne.n	800098c <loop+0x1c>
    {
        /*musicpart begin*/
        /*musicpart end*/
        strSysTimer.bTag1ms = FALSE;
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <loop+0x80>)
 8000984:	7813      	ldrb	r3, [r2, #0]
 8000986:	f36f 0300 	bfc	r3, #0, #1
 800098a:	7013      	strb	r3, [r2, #0]
    }
    if (strSysTimer.bTag10ms == TRUE)
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <loop+0x80>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b01      	cmp	r3, #1
 8000998:	d104      	bne.n	80009a4 <loop+0x34>
    {

        strSysTimer.bTag10ms = FALSE;
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <loop+0x80>)
 800099c:	7813      	ldrb	r3, [r2, #0]
 800099e:	f36f 0341 	bfc	r3, #1, #1
 80009a2:	7013      	strb	r3, [r2, #0]
    }
    if (strSysTimer.bTag100ms == TRUE)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <loop+0x80>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d11b      	bne.n	80009ea <loop+0x7a>
    {
        /*musicpart begin*/
        singing(&total.play);
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <loop+0x84>)
 80009b4:	f000 f986 	bl	8000cc4 <singing>
        music_play(&total.play, &total.musicall);
 80009b8:	490f      	ldr	r1, [pc, #60]	; (80009f8 <loop+0x88>)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <loop+0x84>)
 80009bc:	f000 f9ae 	bl	8000d1c <music_play>
        music_stop(&total.play, &total.musicall);
 80009c0:	490d      	ldr	r1, [pc, #52]	; (80009f8 <loop+0x88>)
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <loop+0x84>)
 80009c4:	f000 fa2a 	bl	8000e1c <music_stop>
        /*musicpart end*/
        if (flag_key > 0)
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <loop+0x8c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd04      	ble.n	80009da <loop+0x6a>
            flag_key--;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <loop+0x8c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <loop+0x8c>)
 80009d8:	6013      	str	r3, [r2, #0]
        key_play(&total.keyplay);
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <loop+0x90>)
 80009dc:	f000 fb38 	bl	8001050 <key_play>
        strSysTimer.bTag100ms = FALSE;
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <loop+0x80>)
 80009e2:	7813      	ldrb	r3, [r2, #0]
 80009e4:	f36f 0382 	bfc	r3, #2, #1
 80009e8:	7013      	strb	r3, [r2, #0]
    }
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000e8 	.word	0x200000e8
 80009f4:	20000028 	.word	0x20000028
 80009f8:	20000074 	.word	0x20000074
 80009fc:	200000d8 	.word	0x200000d8
 8000a00:	20000060 	.word	0x20000060

08000a04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f001 fa1d 	bl	8001e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f83c 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f7ff fda0 	bl	8000554 <MX_GPIO_Init>
  MX_TIM15_Init();
 8000a14:	f000 fe84 	bl	8001720 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000a18:	f000 ff08 	bl	800182c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a1c:	f000 ff80 	bl	8001920 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000a20:	f001 f93c 	bl	8001c9c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a24:	f000 fd8e 	bl	8001544 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a28:	f000 fe02 	bl	8001630 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Total_Init(&total); // 全局初始化，lcd初始化，开启串口信息中断等待，串口发送已经全部初始化完成
 8000a2c:	4812      	ldr	r0, [pc, #72]	; (8000a78 <main+0x74>)
 8000a2e:	f7ff fd71 	bl	8000514 <Total_Init>
  LCD_init();
 8000a32:	f000 fb61 	bl	80010f8 <LCD_init>
  LCD_clear();
 8000a36:	f000 fba7 	bl	8001188 <LCD_clear>
  lcd_display();
 8000a3a:	f7ff ff05 	bl	8000848 <lcd_display>
//  HAL_UART_Transmit(&huart1, start1, 7, 0xffff);
  HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	490e      	ldr	r1, [pc, #56]	; (8000a7c <main+0x78>)
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <main+0x7c>)
 8000a44:	f004 f878 	bl	8004b38 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    loop();                                   // 主循环函数
 8000a48:	f7ff ff92 	bl	8000970 <loop>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // 用于检测是否进入正常主循环
 8000a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <main+0x80>)
 8000a52:	f001 fddd 	bl	8002610 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <main+0x66>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 fdec 	bl	8002640 <HAL_GPIO_WritePin>
 8000a68:	e7ee      	b.n	8000a48 <main+0x44>
    else
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 fde5 	bl	8002640 <HAL_GPIO_WritePin>
    loop();                                   // 主循环函数
 8000a76:	e7e7      	b.n	8000a48 <main+0x44>
 8000a78:	20000028 	.word	0x20000028
 8000a7c:	200000e0 	.word	0x200000e0
 8000a80:	20000268 	.word	0x20000268
 8000a84:	48000800 	.word	0x48000800

08000a88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	2238      	movs	r2, #56	; 0x38
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f006 f86c 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aaa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aae:	f001 fddf 	bl	8002670 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000ac8:	2319      	movs	r3, #25
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fe7b 	bl	80027d8 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000ae8:	f000 f848 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000aec:	230f      	movs	r3, #15
 8000aee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 f979 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f834 	bl	8000b7c <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	; 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // 中断回调函数，
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_RxCpltCallback+0x4c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d119      	bne.n	8000b60 <HAL_UART_RxCpltCallback+0x44>
  {
    rxkey = (int)(rx_data[0] - '0');
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_UART_RxCpltCallback+0x50>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3b30      	subs	r3, #48	; 0x30
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_UART_RxCpltCallback+0x54>)
 8000b34:	6013      	str	r3, [r2, #0]
    total.keyboard.key_p = rxkey;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_RxCpltCallback+0x54>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_UART_RxCpltCallback+0x58>)
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
    key_deal(&total.keyboard);
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <HAL_UART_RxCpltCallback+0x5c>)
 8000b40:	f7ff fd84 	bl	800064c <key_deal>
    lcd_display();
 8000b44:	f7ff fe80 	bl	8000848 <lcd_display>
    HAL_UART_Transmit(&huart1, rx_data, 1, 0xffff);
 8000b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4907      	ldr	r1, [pc, #28]	; (8000b6c <HAL_UART_RxCpltCallback+0x50>)
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_UART_RxCpltCallback+0x4c>)
 8000b52:	f003 ff63 	bl	8004a1c <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	4904      	ldr	r1, [pc, #16]	; (8000b6c <HAL_UART_RxCpltCallback+0x50>)
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <HAL_UART_RxCpltCallback+0x4c>)
 8000b5c:	f003 ffec 	bl	8004b38 <HAL_UART_Receive_IT>
  } // 用于将收到的串口信息转化为int信息并传导给决定函数，同时更新lcd，发送串口收到的信息开启等待下一轮串口中断信息
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000268 	.word	0x20000268
 8000b6c:	200000e0 	.word	0x200000e0
 8000b70:	200000dc 	.word	0x200000dc
 8000b74:	20000028 	.word	0x20000028
 8000b78:	2000006c 	.word	0x2000006c

08000b7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>

08000b86 <music_init>:
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;
extern int flag_key;

void music_init(Play *play) // 音乐演奏结构体初始化
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
    play->highchannel.key = 0;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    play->highchannel.output = 1;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	741a      	strb	r2, [r3, #16]
    play->highchannel.progress = 0;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
    play->lowchannel.key = 0;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
    play->lowchannel.output = 2;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2202      	movs	r2, #2
 8000baa:	711a      	strb	r2, [r3, #4]
    play->lowchannel.progress = 0;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    play->voicechannel.key = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
    play->voicechannel.output = 3;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2203      	movs	r2, #3
 8000bbc:	771a      	strb	r2, [r3, #28]
    play->voicechannel.progress = 0;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
    play->num_music = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
    play->volume = 5;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2205      	movs	r2, #5
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
    play->speed = 1;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    play->flag = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	631a      	str	r2, [r3, #48]	; 0x30
    play->state = stop;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
};
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <mustorage_init>:
void mustorage_init(Musicall *musicall) // 音乐按键姓名，通道等信息存储初始化
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    musicall->music1.chnum = 1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	61da      	str	r2, [r3, #28]
    musicall->music1.length = 266;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8000c04:	619a      	str	r2, [r3, #24]
    for (int i = 0; i < 20; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00b      	b.n	8000c24 <mustorage_init+0x34>
    {
        musicall->music1.music_name[i] = name1[i];
 8000c0c:	4a27      	ldr	r2, [pc, #156]	; (8000cac <mustorage_init+0xbc>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	4413      	add	r3, r2
 8000c12:	7819      	ldrb	r1, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4413      	add	r3, r2
 8000c1a:	460a      	mov	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b13      	cmp	r3, #19
 8000c28:	ddf0      	ble.n	8000c0c <mustorage_init+0x1c>
    }
    musicall->music1.musickey = music1k;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <mustorage_init+0xc0>)
 8000c2e:	615a      	str	r2, [r3, #20]
    musicall->music2.chnum = 2;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2202      	movs	r2, #2
 8000c34:	63da      	str	r2, [r3, #60]	; 0x3c
    musicall->music2.length = 192;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	22c0      	movs	r2, #192	; 0xc0
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
    for (int i = 0; i < 20; i++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	e00c      	b.n	8000c5c <mustorage_init+0x6c>
    {
        musicall->music2.music_name[i] = name2[i];
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <mustorage_init+0xc4>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4413      	add	r3, r2
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4413      	add	r3, r2
 8000c50:	3320      	adds	r3, #32
 8000c52:	460a      	mov	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	2b13      	cmp	r3, #19
 8000c60:	ddef      	ble.n	8000c42 <mustorage_init+0x52>
    }
    musicall->music2.musickey = music2k;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <mustorage_init+0xc8>)
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
    musicall->music3.chnum = 1;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	65da      	str	r2, [r3, #92]	; 0x5c
    musicall->music3.length = 122;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	227a      	movs	r2, #122	; 0x7a
 8000c72:	659a      	str	r2, [r3, #88]	; 0x58
    for (int i = 0; i < 20; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e00c      	b.n	8000c94 <mustorage_init+0xa4>
    {
        musicall->music3.music_name[i] = name3[i];
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <mustorage_init+0xcc>)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	7819      	ldrb	r1, [r3, #0]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	3340      	adds	r3, #64	; 0x40
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b13      	cmp	r3, #19
 8000c98:	ddef      	ble.n	8000c7a <mustorage_init+0x8a>
    }
    musicall->music3.musickey = music3k;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <mustorage_init+0xd0>)
 8000c9e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000ca0:	bf00      	nop
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	08006c7c 	.word	0x08006c7c
 8000cb0:	08006c90 	.word	0x08006c90
 8000cb4:	08007140 	.word	0x08007140
 8000cb8:	08007154 	.word	0x08007154
 8000cbc:	08007794 	.word	0x08007794
 8000cc0:	080077a8 	.word	0x080077a8

08000cc4 <singing>:
void singing(Play *play) // 演奏过程函数，用于定时给函数弹奏进度增加
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    if (play->num_music != 0)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d01d      	beq.n	8000d10 <singing+0x4c>
    {
        if (play->flag <= play->speed)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dc05      	bgt.n	8000cec <singing+0x28>
            play->flag++;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	631a      	str	r2, [r3, #48]	; 0x30
            play->lowchannel.progress++;
            play->voicechannel.progress++;
            play->flag = 0;
        }
    }
}
 8000cea:	e011      	b.n	8000d10 <singing+0x4c>
            play->highchannel.progress++;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	615a      	str	r2, [r3, #20]
            play->lowchannel.progress++;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
            play->voicechannel.progress++;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	621a      	str	r2, [r3, #32]
            play->flag = 0;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <music_play>:

void music_play(Play *play, Musicall *musicall) // 音乐演奏函数，用于将乐谱信息传导给channel
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    if (play->num_music != 0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <music_play+0x1c>
        play->state = sing;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000d36:	e003      	b.n	8000d40 <music_play+0x24>
    else
        play->state = stop;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if (play->num_music == 1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10c      	bne.n	8000d62 <music_play+0x46>
    {
        play->voicechannel.key = musicall->music1.musickey[play->voicechannel.progress];
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	619a      	str	r2, [r3, #24]
        pwm_move(3, play);
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f8f7 	bl	8000f50 <pwm_move>
    }
    if (play->num_music == 2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d11f      	bne.n	8000daa <music_play+0x8e>
    {
        play->voicechannel.key = musicall->music2.musickey[play->voicechannel.progress];
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
        pwm_move(3, play);
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f8e6 	bl	8000f50 <pwm_move>
        play->highchannel.key = musicall->music2.musickey[play->highchannel.progress + musicall->music2.length - 1];
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6959      	ldr	r1, [r3, #20]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d90:	440b      	add	r3, r1
 8000d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d96:	3b01      	subs	r3, #1
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]
        pwm_move(1, play);
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 f8d3 	bl	8000f50 <pwm_move>
    }
    if (play->num_music == 3)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d10c      	bne.n	8000dcc <music_play+0xb0>
    {
        play->highchannel.key = musicall->music3.musickey[play->highchannel.progress];
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60da      	str	r2, [r3, #12]
        pwm_move(1, play);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 f8c2 	bl	8000f50 <pwm_move>
    }
};
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <music_start>:

void music_start(Play *play, int num) // 音乐开始函数，用于启动音乐播放
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
    play->highchannel.key = 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
    play->highchannel.progress = 0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
    play->lowchannel.key = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
    play->lowchannel.progress = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    play->voicechannel.key = 0;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
    play->voicechannel.progress = 0;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
    play->flag = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
    play->num_music = num;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
    pwm_init(play);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f850 	bl	8000eb4 <pwm_init>
};
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <music_stop>:

void music_stop(Play *play, Musicall *musicall) // 音乐停止函数，当音乐播放结束后自动停止并归位
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    if (play->num_music == 1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d111      	bne.n	8000e52 <music_stop+0x36>
    {
        if (play->voicechannel.progress >= musicall->music1.length)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a1a      	ldr	r2, [r3, #32]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	db0b      	blt.n	8000e52 <music_stop+0x36>
        {
            play->num_music = 0;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
            music_start(play, 0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffc6 	bl	8000dd4 <music_start>
            lcd_display();
 8000e48:	f7ff fcfe 	bl	8000848 <lcd_display>
            pwm_init(play);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f831 	bl	8000eb4 <pwm_init>
        }
    }
    if (play->num_music == 2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d111      	bne.n	8000e7e <music_stop+0x62>
    {
        if (play->highchannel.progress >= musicall->music2.length)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e62:	429a      	cmp	r2, r3
 8000e64:	db0b      	blt.n	8000e7e <music_stop+0x62>
        {
            play->num_music = 0;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
            music_start(play, 0);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb0 	bl	8000dd4 <music_start>
            lcd_display();
 8000e74:	f7ff fce8 	bl	8000848 <lcd_display>
            pwm_init(play);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f81b 	bl	8000eb4 <pwm_init>
        }
    }
    if (play->num_music == 3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d111      	bne.n	8000eaa <music_stop+0x8e>
    {
        if (play->highchannel.progress >= musicall->music3.length)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	db0b      	blt.n	8000eaa <music_stop+0x8e>
        {
            play->num_music = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
            music_start(play, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff9a 	bl	8000dd4 <music_start>
            lcd_display();
 8000ea0:	f7ff fcd2 	bl	8000848 <lcd_display>
            pwm_init(play);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f805 	bl	8000eb4 <pwm_init>
        }
    }
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <pwm_init>:

void pwm_init(Play *play) // PWM初始化函数
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    if (play->num_music == 0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10b      	bne.n	8000edc <pwm_init+0x28>
    {
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	481f      	ldr	r0, [pc, #124]	; (8000f44 <pwm_init+0x90>)
 8000ec8:	f002 fd52 	bl	8003970 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	481e      	ldr	r0, [pc, #120]	; (8000f48 <pwm_init+0x94>)
 8000ed0:	f002 fd4e 	bl	8003970 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <pwm_init+0x98>)
 8000ed8:	f002 fd4a 	bl	8003970 <HAL_TIM_PWM_Stop>
    }
    if (play->num_music == 1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d10b      	bne.n	8000efc <pwm_init+0x48>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <pwm_init+0x98>)
 8000ee8:	f002 fc42 	bl	8003770 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	4816      	ldr	r0, [pc, #88]	; (8000f48 <pwm_init+0x94>)
 8000ef0:	f002 fd3e 	bl	8003970 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <pwm_init+0x90>)
 8000ef8:	f002 fd3a 	bl	8003970 <HAL_TIM_PWM_Stop>
    }
    if (play->num_music == 2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d10b      	bne.n	8000f1c <pwm_init+0x68>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000f04:	2100      	movs	r1, #0
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <pwm_init+0x98>)
 8000f08:	f002 fc32 	bl	8003770 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <pwm_init+0x90>)
 8000f10:	f002 fc2e 	bl	8003770 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f14:	2100      	movs	r1, #0
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <pwm_init+0x94>)
 8000f18:	f002 fd2a 	bl	8003970 <HAL_TIM_PWM_Stop>
    }
    if (play->num_music == 3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d10b      	bne.n	8000f3c <pwm_init+0x88>
    {
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f24:	2100      	movs	r1, #0
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <pwm_init+0x90>)
 8000f28:	f002 fc22 	bl	8003770 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <pwm_init+0x98>)
 8000f30:	f002 fd1e 	bl	8003970 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <pwm_init+0x94>)
 8000f38:	f002 fd1a 	bl	8003970 <HAL_TIM_PWM_Stop>
    }
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000138 	.word	0x20000138
 8000f48:	200000ec 	.word	0x200000ec
 8000f4c:	2000021c 	.word	0x2000021c

08000f50 <pwm_move>:
void pwm_move(int outch, Play *play) // PWMccrarr信息更新函数
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    switch (outch)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d03a      	beq.n	8000fd6 <pwm_move+0x86>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	dc4e      	bgt.n	8001004 <pwm_move+0xb4>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d003      	beq.n	8000f74 <pwm_move+0x24>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d017      	beq.n	8000fa2 <pwm_move+0x52>
    case 3:
        TIM17->ARR = 1000000 / b_freq[play->voicechannel.key];
        TIM17->CCR1 = TIM17->ARR * play->volume / 10;
        break;
    default:
        break;
 8000f72:	e047      	b.n	8001004 <pwm_move+0xb4>
        TIM3->ARR = 1000000 / b_freq[play->highchannel.key];
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a26      	ldr	r2, [pc, #152]	; (8001014 <pwm_move+0xc4>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	4a26      	ldr	r2, [pc, #152]	; (8001018 <pwm_move+0xc8>)
 8000f80:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <pwm_move+0xcc>)
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM3->CCR1 = TIM3->ARR * play->volume / 10;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <pwm_move+0xcc>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <pwm_move+0xcc>)
 8000f96:	4922      	ldr	r1, [pc, #136]	; (8001020 <pwm_move+0xd0>)
 8000f98:	fba1 1303 	umull	r1, r3, r1, r3
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 8000fa0:	e031      	b.n	8001006 <pwm_move+0xb6>
        TIM2->ARR = 1000000 / b_freq[play->lowchannel.key];
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <pwm_move+0xc4>)
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <pwm_move+0xc8>)
 8000fae:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM2->CCR1 = TIM2->ARR * play->volume / 10;
 8000fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	4915      	ldr	r1, [pc, #84]	; (8001020 <pwm_move+0xd0>)
 8000fcc:	fba1 1303 	umull	r1, r3, r1, r3
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 8000fd4:	e017      	b.n	8001006 <pwm_move+0xb6>
        TIM17->ARR = 1000000 / b_freq[play->voicechannel.key];
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <pwm_move+0xc4>)
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <pwm_move+0xc8>)
 8000fe2:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <pwm_move+0xd4>)
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM17->CCR1 = TIM17->ARR * play->volume / 10;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <pwm_move+0xd4>)
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <pwm_move+0xd4>)
 8000ff8:	4909      	ldr	r1, [pc, #36]	; (8001020 <pwm_move+0xd0>)
 8000ffa:	fba1 1303 	umull	r1, r3, r1, r3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 8001002:	e000      	b.n	8001006 <pwm_move+0xb6>
        break;
 8001004:	bf00      	nop
    }
};
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	08006c24 	.word	0x08006c24
 8001018:	000f4240 	.word	0x000f4240
 800101c:	40000400 	.word	0x40000400
 8001020:	cccccccd 	.word	0xcccccccd
 8001024:	40014800 	.word	0x40014800

08001028 <keyplay_init>:

void keyplay_init(Keyplay *keyplay) // 按键弹奏信息初始化函数
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    keyplay->keyhigh = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    keyplay->time = 10;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	220a      	movs	r2, #10
 800103a:	609a      	str	r2, [r3, #8]
    keyplay->volume = 5;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2205      	movs	r2, #5
 8001040:	605a      	str	r2, [r3, #4]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <key_play>:

void key_play(Keyplay *keyplay) // 播放目前弹奏内容函数
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    if (flag_key > 0)
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <key_play+0x60>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dd1a      	ble.n	8001096 <key_play+0x46>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001060:	2100      	movs	r1, #0
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <key_play+0x64>)
 8001064:	f002 fb84 	bl	8003770 <HAL_TIM_PWM_Start>
        TIM17->ARR = 1000000 / b_freq[keyplay->keyhigh];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <key_play+0x68>)
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <key_play+0x6c>)
 8001074:	fb92 f2f3 	sdiv	r2, r2, r3
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <key_play+0x70>)
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM17->CCR1 = TIM17->ARR * keyplay->volume / 10;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <key_play+0x70>)
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6852      	ldr	r2, [r2, #4]
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <key_play+0x70>)
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <key_play+0x74>)
 800108c:	fba1 1303 	umull	r1, r3, r1, r3
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	6353      	str	r3, [r2, #52]	; 0x34
    }
    else if (total.task == play)
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8001094:	e008      	b.n	80010a8 <key_play+0x58>
    else if (total.task == play)
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <key_play+0x78>)
 8001098:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800109c:	2b02      	cmp	r3, #2
 800109e:	d103      	bne.n	80010a8 <key_play+0x58>
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <key_play+0x64>)
 80010a4:	f002 fc64 	bl	8003970 <HAL_TIM_PWM_Stop>
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000d8 	.word	0x200000d8
 80010b4:	2000021c 	.word	0x2000021c
 80010b8:	08006c24 	.word	0x08006c24
 80010bc:	000f4240 	.word	0x000f4240
 80010c0:	40014800 	.word	0x40014800
 80010c4:	cccccccd 	.word	0xcccccccd
 80010c8:	20000028 	.word	0x20000028

080010cc <delay_us>:
#ifndef INC_DELAY_H_
#define INC_DELAY_H_
#include "main.h"

void delay_us(unsigned long udelay) // us级delay函数
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    __IO unsigned long Delay = udelay * 100; //(SystemCoreClock / 8U / 1000000U)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2264      	movs	r2, #100	; 0x64
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	60fb      	str	r3, [r7, #12]
    do
    {
        __NOP();
 80010de:	bf00      	nop
    } while (Delay--);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e5a      	subs	r2, r3, #1
 80010e4:	60fa      	str	r2, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f9      	bne.n	80010de <delay_us+0x12>
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LCD_init>:
#include "font.h"
#include "nokia.h"
#include "delay.h"

void LCD_init(void) // 初始化函数
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

    // 产生一个让lcd复位的低电平脉冲
    LCD_RST_0;
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001102:	4820      	ldr	r0, [pc, #128]	; (8001184 <LCD_init+0x8c>)
 8001104:	f001 fa9c 	bl	8002640 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f000 ff0d 	bl	8001f28 <HAL_Delay>
    LCD_RST_1;
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001114:	481b      	ldr	r0, [pc, #108]	; (8001184 <LCD_init+0x8c>)
 8001116:	f001 fa93 	bl	8002640 <HAL_GPIO_WritePin>
    // 关闭lcd
    LCD_CE_0;
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <LCD_init+0x8c>)
 8001122:	f001 fa8d 	bl	8002640 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fefe 	bl	8001f28 <HAL_Delay>
    // 使能lcd
    LCD_CE_1;
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <LCD_init+0x8c>)
 8001134:	f001 fa84 	bl	8002640 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fef5 	bl	8001f28 <HAL_Delay>
    LCD_write_byte(0x21, 0);
 800113e:	2100      	movs	r1, #0
 8001140:	2021      	movs	r0, #33	; 0x21
 8001142:	f000 f8e7 	bl	8001314 <LCD_write_byte>
    LCD_write_byte(0xc8, 0);
 8001146:	2100      	movs	r1, #0
 8001148:	20c8      	movs	r0, #200	; 0xc8
 800114a:	f000 f8e3 	bl	8001314 <LCD_write_byte>
    LCD_write_byte(0x06, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	2006      	movs	r0, #6
 8001152:	f000 f8df 	bl	8001314 <LCD_write_byte>
    LCD_write_byte(0x13, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2013      	movs	r0, #19
 800115a:	f000 f8db 	bl	8001314 <LCD_write_byte>
    LCD_write_byte(0x20, 0);
 800115e:	2100      	movs	r1, #0
 8001160:	2020      	movs	r0, #32
 8001162:	f000 f8d7 	bl	8001314 <LCD_write_byte>
    LCD_clear();
 8001166:	f000 f80f 	bl	8001188 <LCD_clear>
    LCD_write_byte(0x0c, 0);
 800116a:	2100      	movs	r1, #0
 800116c:	200c      	movs	r0, #12
 800116e:	f000 f8d1 	bl	8001314 <LCD_write_byte>
    // 关闭lcd
    LCD_CE_0;
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <LCD_init+0x8c>)
 800117a:	f001 fa61 	bl	8002640 <HAL_GPIO_WritePin>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	48000800 	.word	0x48000800

08001188 <LCD_clear>:

void LCD_clear(void) // 清屏函数
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
    unsigned int i;

    LCD_write_byte(0x0c, 0);
 800118e:	2100      	movs	r1, #0
 8001190:	200c      	movs	r0, #12
 8001192:	f000 f8bf 	bl	8001314 <LCD_write_byte>
    LCD_write_byte(0x80, 0);
 8001196:	2100      	movs	r1, #0
 8001198:	2080      	movs	r0, #128	; 0x80
 800119a:	f000 f8bb 	bl	8001314 <LCD_write_byte>

    for (i = 0; i < 504; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	e006      	b.n	80011b2 <LCD_clear+0x2a>
        LCD_write_byte(0, 1);
 80011a4:	2101      	movs	r1, #1
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f8b4 	bl	8001314 <LCD_write_byte>
    for (i = 0; i < 504; i++)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80011b8:	d3f4      	bcc.n	80011a4 <LCD_clear+0x1c>
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <LCD_set_XY>:

void LCD_set_XY(unsigned char X, unsigned char Y) // 光标移动函数
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
    LCD_write_byte(0x40 | Y, 0); // column
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f898 	bl	8001314 <LCD_write_byte>
    LCD_write_byte(0x80 | X, 0); // row
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f890 	bl	8001314 <LCD_write_byte>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LCD_write_char>:

void LCD_write_char(unsigned char c) // 在目前光标位置写单个字符函数
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    unsigned char line;
    c -= 32;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	3b20      	subs	r3, #32
 800120a:	71fb      	strb	r3, [r7, #7]
    for (line = 0; line < 6; line++)
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e010      	b.n	8001234 <LCD_write_char+0x38>
        LCD_write_byte(font6x8[c][line], 1);
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	7bf9      	ldrb	r1, [r7, #15]
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <LCD_write_char+0x48>)
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	440b      	add	r3, r1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f873 	bl	8001314 <LCD_write_byte>
    for (line = 0; line < 6; line++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d9eb      	bls.n	8001212 <LCD_write_char+0x16>
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08007a00 	.word	0x08007a00

08001248 <LCD_write_number>:

void LCD_write_number(unsigned char X, unsigned char Y, unsigned int num) // 写99以内数字函数
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	603a      	str	r2, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	460b      	mov	r3, r1
 8001256:	71bb      	strb	r3, [r7, #6]
    // 如果数字大于99
    if (num > 99)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b63      	cmp	r3, #99	; 0x63
 800125c:	d906      	bls.n	800126c <LCD_write_number+0x24>
        LCD_write_english_string(X, Y, "ERROR!");
 800125e:	79b9      	ldrb	r1, [r7, #6]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <LCD_write_number+0x84>)
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f835 	bl	80012d4 <LCD_write_english_string>
        LCD_write_char(a);
        X++;
        LCD_write_char(b);
        X++;
    }
}
 800126a:	e02b      	b.n	80012c4 <LCD_write_number+0x7c>
        a = num / 10;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <LCD_write_number+0x88>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	73fb      	strb	r3, [r7, #15]
        b = num % 10;
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <LCD_write_number+0x88>)
 800127c:	fba3 2301 	umull	r2, r3, r3, r1
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1aca      	subs	r2, r1, r3
 800128c:	4613      	mov	r3, r2
 800128e:	73bb      	strb	r3, [r7, #14]
        a += 48;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3330      	adds	r3, #48	; 0x30
 8001294:	73fb      	strb	r3, [r7, #15]
        b += 48;
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3330      	adds	r3, #48	; 0x30
 800129a:	73bb      	strb	r3, [r7, #14]
        LCD_set_XY(X, Y);
 800129c:	79ba      	ldrb	r2, [r7, #6]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff8e 	bl	80011c4 <LCD_set_XY>
        LCD_write_char(a);
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffa6 	bl	80011fc <LCD_write_char>
        X++;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3301      	adds	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
        LCD_write_char(b);
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff9f 	bl	80011fc <LCD_write_char>
        X++;
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	3301      	adds	r3, #1
 80012c2:	71fb      	strb	r3, [r7, #7]
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08006be4 	.word	0x08006be4
 80012d0:	cccccccd 	.word	0xcccccccd

080012d4 <LCD_write_english_string>:

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s) // 写英文字符串函数
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	603a      	str	r2, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	460b      	mov	r3, r1
 80012e2:	71bb      	strb	r3, [r7, #6]

    LCD_set_XY(X, Y);
 80012e4:	79ba      	ldrb	r2, [r7, #6]
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff6a 	bl	80011c4 <LCD_set_XY>
    while (*s)
 80012f0:	e007      	b.n	8001302 <LCD_write_english_string+0x2e>
    {
        LCD_write_char(*s);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff80 	bl	80011fc <LCD_write_char>
        s++;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	603b      	str	r3, [r7, #0]
    while (*s)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f3      	bne.n	80012f2 <LCD_write_english_string+0x1e>
    }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <LCD_write_byte>:

void LCD_write_byte(unsigned char dat, unsigned char command) // 写入指令函数
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	71bb      	strb	r3, [r7, #6]
    unsigned char i;
    LCD_CE_0;
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132a:	4822      	ldr	r0, [pc, #136]	; (80013b4 <LCD_write_byte+0xa0>)
 800132c:	f001 f988 	bl	8002640 <HAL_GPIO_WritePin>
    if (command == 0)
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <LCD_write_byte+0x30>
        LCD_DC_0;
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <LCD_write_byte+0xa0>)
 800133e:	f001 f97f 	bl	8002640 <HAL_GPIO_WritePin>
 8001342:	e005      	b.n	8001350 <LCD_write_byte+0x3c>
    else
        LCD_DC_1;
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	481a      	ldr	r0, [pc, #104]	; (80013b4 <LCD_write_byte+0xa0>)
 800134c:	f001 f978 	bl	8002640 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e021      	b.n	800139a <LCD_write_byte+0x86>
    {
        if (dat & 0x80)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da05      	bge.n	800136a <LCD_write_byte+0x56>
            SDIN_1;
 800135e:	2201      	movs	r2, #1
 8001360:	2108      	movs	r1, #8
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <LCD_write_byte+0xa0>)
 8001364:	f001 f96c 	bl	8002640 <HAL_GPIO_WritePin>
 8001368:	e004      	b.n	8001374 <LCD_write_byte+0x60>
        else
            SDIN_0;
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <LCD_write_byte+0xa0>)
 8001370:	f001 f966 	bl	8002640 <HAL_GPIO_WritePin>
        SCLK_0;
 8001374:	2200      	movs	r2, #0
 8001376:	2104      	movs	r1, #4
 8001378:	480e      	ldr	r0, [pc, #56]	; (80013b4 <LCD_write_byte+0xa0>)
 800137a:	f001 f961 	bl	8002640 <HAL_GPIO_WritePin>
        delay_us(10);
 800137e:	200a      	movs	r0, #10
 8001380:	f7ff fea4 	bl	80010cc <delay_us>
        dat = dat << 1;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
        SCLK_1;
 800138a:	2201      	movs	r2, #1
 800138c:	2104      	movs	r1, #4
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <LCD_write_byte+0xa0>)
 8001390:	f001 f956 	bl	8002640 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3301      	adds	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b07      	cmp	r3, #7
 800139e:	d9da      	bls.n	8001356 <LCD_write_byte+0x42>
    }
    LCD_CE_1;
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <LCD_write_byte+0xa0>)
 80013a8:	f001 f94a 	bl	8002640 <HAL_GPIO_WritePin>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	48000800 	.word	0x48000800

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x44>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x44>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x44>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x44>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013ee:	f001 f9e3 	bl	80027b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 fd4e 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  lSystemCnt++;
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <SysTick_Handler+0xa8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <SysTick_Handler+0xa8>)
 8001458:	6013      	str	r3, [r2, #0]
  lSystemCnt %= 100000;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <SysTick_Handler+0xa8>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	0953      	lsrs	r3, r2, #5
 8001460:	4924      	ldr	r1, [pc, #144]	; (80014f4 <SysTick_Handler+0xac>)
 8001462:	fba1 1303 	umull	r1, r3, r1, r3
 8001466:	09db      	lsrs	r3, r3, #7
 8001468:	4923      	ldr	r1, [pc, #140]	; (80014f8 <SysTick_Handler+0xb0>)
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <SysTick_Handler+0xa8>)
 8001472:	6013      	str	r3, [r2, #0]
  strSysTimer.bTag1ms = TRUE;
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <SysTick_Handler+0xb4>)
 8001476:	7813      	ldrb	r3, [r2, #0]
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	7013      	strb	r3, [r2, #0]
  if (lSystemCnt % 10 == 9)
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <SysTick_Handler+0xa8>)
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <SysTick_Handler+0xb8>)
 8001484:	fba3 2301 	umull	r2, r3, r3, r1
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	1aca      	subs	r2, r1, r3
 8001494:	2a09      	cmp	r2, #9
 8001496:	d104      	bne.n	80014a2 <SysTick_Handler+0x5a>
    strSysTimer.bTag10ms = TRUE;
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <SysTick_Handler+0xb4>)
 800149a:	7813      	ldrb	r3, [r2, #0]
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	7013      	strb	r3, [r2, #0]
  if (lSystemCnt % 100 == 99)
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <SysTick_Handler+0xa8>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <SysTick_Handler+0xbc>)
 80014a8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	2164      	movs	r1, #100	; 0x64
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b63      	cmp	r3, #99	; 0x63
 80014b8:	d104      	bne.n	80014c4 <SysTick_Handler+0x7c>
    strSysTimer.bTag100ms = TRUE;
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <SysTick_Handler+0xb4>)
 80014bc:	7813      	ldrb	r3, [r2, #0]
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	7013      	strb	r3, [r2, #0]
  if (lSystemCnt % 1000 == 999)
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <SysTick_Handler+0xa8>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <SysTick_Handler+0xc0>)
 80014ca:	fba3 1302 	umull	r1, r3, r3, r2
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014de:	4293      	cmp	r3, r2
 80014e0:	d104      	bne.n	80014ec <SysTick_Handler+0xa4>
    strSysTimer.bTag1s = TRUE;
 80014e2:	4a06      	ldr	r2, [pc, #24]	; (80014fc <SysTick_Handler+0xb4>)
 80014e4:	7813      	ldrb	r3, [r2, #0]
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200000e4 	.word	0x200000e4
 80014f4:	0a7c5ac5 	.word	0x0a7c5ac5
 80014f8:	000186a0 	.word	0x000186a0
 80014fc:	200000e8 	.word	0x200000e8
 8001500:	cccccccd 	.word	0xcccccccd
 8001504:	51eb851f 	.word	0x51eb851f
 8001508:	10624dd3 	.word	0x10624dd3

0800150c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <USART1_IRQHandler+0x10>)
 8001512:	f003 fb5d 	bl	8004bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000268 	.word	0x20000268

08001520 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MX_TIM2_Init+0xe8>)
 8001578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <MX_TIM2_Init+0xe8>)
 8001580:	2263      	movs	r2, #99	; 0x63
 8001582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <MX_TIM2_Init+0xe8>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_TIM2_Init+0xe8>)
 800158c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_TIM2_Init+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_TIM2_Init+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <MX_TIM2_Init+0xe8>)
 80015a0:	f002 f838 	bl	8003614 <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f7ff fae7 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b8:	4619      	mov	r1, r3
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <MX_TIM2_Init+0xe8>)
 80015bc:	f002 fb82 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015c6:	f7ff fad9 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <MX_TIM2_Init+0xe8>)
 80015cc:	f002 f879 	bl	80036c2 <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015d6:	f7ff fad1 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <MX_TIM2_Init+0xe8>)
 80015ea:	f003 f8b9 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015f4:	f7ff fac2 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM2_Init+0xe8>)
 8001610:	f002 fa44 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800161a:	f7ff faaf 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM2_Init+0xe8>)
 8001620:	f000 fa72 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000ec 	.word	0x200000ec

08001630 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001664:	4a2d      	ldr	r2, [pc, #180]	; (800171c <MX_TIM3_Init+0xec>)
 8001666:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <MX_TIM3_Init+0xe8>)
 800166a:	2263      	movs	r2, #99	; 0x63
 800166c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_TIM3_Init+0xe8>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <MX_TIM3_Init+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <MX_TIM3_Init+0xe8>)
 800168a:	f001 ffc3 	bl	8003614 <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001694:	f7ff fa72 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	4619      	mov	r1, r3
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016a6:	f002 fb0d 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016b0:	f7ff fa64 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016b6:	f002 f804 	bl	80036c2 <HAL_TIM_PWM_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016c0:	f7ff fa5c 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016d4:	f003 f844 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016de:	f7ff fa4d 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	; 0x60
 80016e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM3_Init+0xe8>)
 80016fa:	f002 f9cf 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001704:	f7ff fa3a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM3_Init+0xe8>)
 800170a:	f000 f9fd 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3738      	adds	r7, #56	; 0x38
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000138 	.word	0x20000138
 800171c:	40000400 	.word	0x40000400

08001720 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b098      	sub	sp, #96	; 0x60
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2234      	movs	r2, #52	; 0x34
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fa11 	bl	8006b74 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <MX_TIM15_Init+0x104>)
 8001754:	4a34      	ldr	r2, [pc, #208]	; (8001828 <MX_TIM15_Init+0x108>)
 8001756:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <MX_TIM15_Init+0x104>)
 800175a:	2263      	movs	r2, #99	; 0x63
 800175c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <MX_TIM15_Init+0x104>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <MX_TIM15_Init+0x104>)
 8001766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <MX_TIM15_Init+0x104>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <MX_TIM15_Init+0x104>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <MX_TIM15_Init+0x104>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800177e:	4829      	ldr	r0, [pc, #164]	; (8001824 <MX_TIM15_Init+0x104>)
 8001780:	f001 ff9f 	bl	80036c2 <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800178a:	f7ff f9f7 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800179a:	4619      	mov	r1, r3
 800179c:	4821      	ldr	r0, [pc, #132]	; (8001824 <MX_TIM15_Init+0x104>)
 800179e:	f002 ffdf 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80017a8:	f7ff f9e8 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_TIM15_Init+0x104>)
 80017d2:	f002 f963 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80017dc:	f7ff f9ce 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_TIM15_Init+0x104>)
 8001808:	f003 f82c 	bl	8004864 <HAL_TIMEx_ConfigBreakDeadTime>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001812:	f7ff f9b3 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_TIM15_Init+0x104>)
 8001818:	f000 f976 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 800181c:	bf00      	nop
 800181e:	3760      	adds	r7, #96	; 0x60
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000184 	.word	0x20000184
 8001828:	40014000 	.word	0x40014000

0800182c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2234      	movs	r2, #52	; 0x34
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f005 f991 	bl	8006b74 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <MX_TIM16_Init+0xec>)
 8001854:	4a31      	ldr	r2, [pc, #196]	; (800191c <MX_TIM16_Init+0xf0>)
 8001856:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <MX_TIM16_Init+0xec>)
 800185a:	2263      	movs	r2, #99	; 0x63
 800185c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <MX_TIM16_Init+0xec>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_TIM16_Init+0xec>)
 8001866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_TIM16_Init+0xec>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <MX_TIM16_Init+0xec>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_TIM16_Init+0xec>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800187e:	4826      	ldr	r0, [pc, #152]	; (8001918 <MX_TIM16_Init+0xec>)
 8001880:	f001 fec8 	bl	8003614 <HAL_TIM_Base_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800188a:	f7ff f977 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800188e:	4822      	ldr	r0, [pc, #136]	; (8001918 <MX_TIM16_Init+0xec>)
 8001890:	f001 ff17 	bl	80036c2 <HAL_TIM_PWM_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800189a:	f7ff f96f 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4815      	ldr	r0, [pc, #84]	; (8001918 <MX_TIM16_Init+0xec>)
 80018c4:	f002 f8ea 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80018ce:	f7ff f955 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM16_Init+0xec>)
 80018fa:	f002 ffb3 	bl	8004864 <HAL_TIMEx_ConfigBreakDeadTime>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001904:	f7ff f93a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM16_Init+0xec>)
 800190a:	f000 f8fd 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3750      	adds	r7, #80	; 0x50
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001d0 	.word	0x200001d0
 800191c:	40014400 	.word	0x40014400

08001920 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2234      	movs	r2, #52	; 0x34
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f005 f917 	bl	8006b74 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <MX_TIM17_Init+0xec>)
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <MX_TIM17_Init+0xf0>)
 800194a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 99;
 800194c:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <MX_TIM17_Init+0xec>)
 800194e:	2263      	movs	r2, #99	; 0x63
 8001950:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <MX_TIM17_Init+0xec>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001958:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <MX_TIM17_Init+0xec>)
 800195a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <MX_TIM17_Init+0xec>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <MX_TIM17_Init+0xec>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <MX_TIM17_Init+0xec>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001972:	4826      	ldr	r0, [pc, #152]	; (8001a0c <MX_TIM17_Init+0xec>)
 8001974:	f001 fe4e 	bl	8003614 <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800197e:	f7ff f8fd 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001982:	4822      	ldr	r0, [pc, #136]	; (8001a0c <MX_TIM17_Init+0xec>)
 8001984:	f001 fe9d 	bl	80036c2 <HAL_TIM_PWM_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800198e:	f7ff f8f5 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <MX_TIM17_Init+0xec>)
 80019b8:	f002 f870 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80019c2:	f7ff f8db 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_TIM17_Init+0xec>)
 80019ee:	f002 ff39 	bl	8004864 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80019f8:	f7ff f8c0 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_TIM17_Init+0xec>)
 80019fe:	f000 f883 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 8001a02:	bf00      	nop
 8001a04:	3750      	adds	r7, #80	; 0x50
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000021c 	.word	0x2000021c
 8001a10:	40014800 	.word	0x40014800

08001a14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a24:	d10c      	bne.n	8001a40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001a3e:	e034      	b.n	8001aaa <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_TIM_Base_MspInit+0xa8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10c      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
}
 8001a62:	e022      	b.n	8001aaa <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM16)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_TIM_Base_MspInit+0xac>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10c      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	e010      	b.n	8001aaa <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM17)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <HAL_TIM_Base_MspInit+0xb0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10b      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40000400 	.word	0x40000400
 8001ac0:	40014400 	.word	0x40014400
 8001ac4:	40014800 	.word	0x40014800

08001ac8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_TIM_PWM_MspInit+0x38>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10b      	bne.n	8001af2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	; 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d11d      	bne.n	8001b66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	4a55      	ldr	r2, [pc, #340]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f000 fbd4 	bl	800230c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001b64:	e089      	b.n	8001c7a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM3)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_TIM_MspPostInit+0x180>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d11c      	bne.n	8001baa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	483a      	ldr	r0, [pc, #232]	; (8001c8c <HAL_TIM_MspPostInit+0x184>)
 8001ba4:	f000 fbb2 	bl	800230c <HAL_GPIO_Init>
}
 8001ba8:	e067      	b.n	8001c7a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM15)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <HAL_TIM_MspPostInit+0x188>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d11d      	bne.n	8001bf0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001bdc:	2309      	movs	r3, #9
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f000 fb8f 	bl	800230c <HAL_GPIO_Init>
}
 8001bee:	e044      	b.n	8001c7a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM16)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_TIM_MspPostInit+0x18c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11d      	bne.n	8001c36 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001c22:	2301      	movs	r3, #1
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f000 fb6c 	bl	800230c <HAL_GPIO_Init>
}
 8001c34:	e021      	b.n	8001c7a <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM17)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_TIM_MspPostInit+0x190>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d11c      	bne.n	8001c7a <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_MspPostInit+0x17c>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f000 fb49 	bl	800230c <HAL_GPIO_Init>
}
 8001c7a:	bf00      	nop
 8001c7c:	3730      	adds	r7, #48	; 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	48000800 	.word	0x48000800
 8001c90:	40014000 	.word	0x40014000
 8001c94:	40014400 	.word	0x40014400
 8001c98:	40014800 	.word	0x40014800

08001c9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <MX_USART1_UART_Init+0x94>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ca8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce4:	4811      	ldr	r0, [pc, #68]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ce6:	f002 fe49 	bl	800497c <HAL_UART_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf0:	f7fe ff44 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cf8:	f004 fe71 	bl	80069de <HAL_UARTEx_SetTxFifoThreshold>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d02:	f7fe ff3b 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001d0a:	f004 fea6 	bl	8006a5a <HAL_UARTEx_SetRxFifoThreshold>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d14:	f7fe ff32 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001d1a:	f004 fe27 	bl	800696c <HAL_UARTEx_DisableFifoMode>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d24:	f7fe ff2a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000268 	.word	0x20000268
 8001d30:	40013800 	.word	0x40013800

08001d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b09a      	sub	sp, #104	; 0x68
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	2244      	movs	r2, #68	; 0x44
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 ff0d 	bl	8006b74 <memset>
  if(uartHandle->Instance==USART1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <HAL_UART_MspInit+0xb4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d13d      	bne.n	8001de0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fa5f 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d7c:	f7fe fefe 	bl	8000b7c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_UART_MspInit+0xb8>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_UART_MspInit+0xb8>)
 8001d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_UART_MspInit+0xb8>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_UART_MspInit+0xb8>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <HAL_UART_MspInit+0xb8>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_UART_MspInit+0xb8>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001db0:	2330      	movs	r3, #48	; 0x30
 8001db2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <HAL_UART_MspInit+0xbc>)
 8001dcc:	f000 fa9e 	bl	800230c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2025      	movs	r0, #37	; 0x25
 8001dd6:	f000 f9a4 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dda:	2025      	movs	r0, #37	; 0x25
 8001ddc:	f000 f9bb 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001de0:	bf00      	nop
 8001de2:	3768      	adds	r7, #104	; 0x68
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000800 	.word	0x48000800

08001df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df8:	f7ff fb92 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	; (8001e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <LoopForever+0xe>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	; (8001e40 <LoopForever+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f004 feaf 	bl	8006b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e26:	f7fe fded 	bl	8000a04 <main>

08001e2a <LoopForever>:

LoopForever:
    b LoopForever
 8001e2a:	e7fe      	b.n	8001e2a <LoopForever>
  ldr   r0, =_estack
 8001e2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e38:	08007c78 	.word	0x08007c78
  ldr r2, =_sbss
 8001e3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e40:	20000300 	.word	0x20000300

08001e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_2_IRQHandler>

08001e46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f95b 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f80e 	bl	8001e78 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	71fb      	strb	r3, [r7, #7]
 8001e66:	e001      	b.n	8001e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e68:	f7ff faa6 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_InitTick+0x68>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d022      	beq.n	8001ed2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_InitTick+0x6c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_InitTick+0x68>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f966 	bl	8002172 <HAL_SYSTICK_Config>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10f      	bne.n	8001ecc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	d809      	bhi.n	8001ec6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	f000 f932 	bl	8002122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_InitTick+0x70>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e007      	b.n	8001ed6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e004      	b.n	8001ed6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e001      	b.n	8001ed6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_IncTick+0x1c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <HAL_IncTick+0x1c>)
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	200002fc 	.word	0x200002fc
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	200002fc 	.word	0x200002fc

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d004      	beq.n	8001f4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_Delay+0x40>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4c:	bf00      	nop
 8001f4e:	f7ff ffdf 	bl	8001f10 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d8f7      	bhi.n	8001f4e <HAL_Delay+0x26>
  {
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000008 	.word	0x20000008

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff29 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff40 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff90 	bl	8002060 <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5f 	bl	800200c <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff33 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa4 	bl	80020c8 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d005      	beq.n	80021ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2204      	movs	r2, #4
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e037      	b.n	800221e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 020e 	bic.w	r2, r2, #14
 80021bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002212:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800221c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d00d      	beq.n	8002270 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e047      	b.n	8002300 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 020e 	bic.w	r2, r2, #14
 800227e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800229e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
    }
  }
  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800231a:	e15a      	b.n	80025d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 814c 	beq.w	80025cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d005      	beq.n	800234c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002348:	2b02      	cmp	r3, #2
 800234a:	d130      	bne.n	80023ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002382:	2201      	movs	r2, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0201 	and.w	r2, r3, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d017      	beq.n	80023ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d123      	bne.n	800243e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_GPIO_Init+0x2e4>)
 8002482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002484:	4a5a      	ldr	r2, [pc, #360]	; (80025f0 <HAL_GPIO_Init+0x2e4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6613      	str	r3, [r2, #96]	; 0x60
 800248c:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_GPIO_Init+0x2e4>)
 800248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002498:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_GPIO_Init+0x2e8>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024c2:	d01f      	beq.n	8002504 <HAL_GPIO_Init+0x1f8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <HAL_GPIO_Init+0x2ec>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d019      	beq.n	8002500 <HAL_GPIO_Init+0x1f4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <HAL_GPIO_Init+0x2f0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_GPIO_Init+0x1f0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4a      	ldr	r2, [pc, #296]	; (8002600 <HAL_GPIO_Init+0x2f4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00d      	beq.n	80024f8 <HAL_GPIO_Init+0x1ec>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a49      	ldr	r2, [pc, #292]	; (8002604 <HAL_GPIO_Init+0x2f8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_Init+0x1e8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a48      	ldr	r2, [pc, #288]	; (8002608 <HAL_GPIO_Init+0x2fc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_GPIO_Init+0x1e4>
 80024ec:	2305      	movs	r3, #5
 80024ee:	e00a      	b.n	8002506 <HAL_GPIO_Init+0x1fa>
 80024f0:	2306      	movs	r3, #6
 80024f2:	e008      	b.n	8002506 <HAL_GPIO_Init+0x1fa>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x1fa>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x1fa>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x1fa>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x1fa>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002516:	4937      	ldr	r1, [pc, #220]	; (80025f4 <HAL_GPIO_Init+0x2e8>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_GPIO_Init+0x300>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002548:	4a30      	ldr	r2, [pc, #192]	; (800260c <HAL_GPIO_Init+0x300>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <HAL_GPIO_Init+0x300>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_GPIO_Init+0x300>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_GPIO_Init+0x300>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_GPIO_Init+0x300>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_GPIO_Init+0x300>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_GPIO_Init+0x300>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f ae9d 	bne.w	800231c <HAL_GPIO_Init+0x10>
  }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000800 	.word	0x48000800
 8002600:	48000c00 	.word	0x48000c00
 8002604:	48001000 	.word	0x48001000
 8002608:	48001400 	.word	0x48001400
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e001      	b.n	8002632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d141      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800267e:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d131      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002692:	4a46      	ldr	r2, [pc, #280]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a4:	4a41      	ldr	r2, [pc, #260]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ac:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2232      	movs	r2, #50	; 0x32
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	0c9b      	lsrs	r3, r3, #18
 80026be:	3301      	adds	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c2:	e002      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d102      	bne.n	80026de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	d158      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e057      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002700:	e04d      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002708:	d141      	bne.n	800278e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d131      	bne.n	800277c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271e:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2232      	movs	r2, #50	; 0x32
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	0c9b      	lsrs	r3, r3, #18
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800274e:	e002      	b.n	8002756 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d102      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f2      	bne.n	8002750 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d112      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e011      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800278c:	e007      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40007000 	.word	0x40007000
 80027b0:	20000000 	.word	0x20000000
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c6:	6093      	str	r3, [r2, #8]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40007000 	.word	0x40007000

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e2fe      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d075      	beq.n	80028e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b97      	ldr	r3, [pc, #604]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002800:	4b94      	ldr	r3, [pc, #592]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d102      	bne.n	8002816 <HAL_RCC_OscConfig+0x3e>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d002      	beq.n	800281c <HAL_RCC_OscConfig+0x44>
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2d9      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x74>
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a84      	ldr	r2, [pc, #528]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7e      	ldr	r2, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b7c      	ldr	r3, [pc, #496]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7b      	ldr	r2, [pc, #492]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 8002870:	4b78      	ldr	r3, [pc, #480]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a77      	ldr	r2, [pc, #476]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a74      	ldr	r2, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff fb3e 	bl	8001f10 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff fb3a 	bl	8001f10 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e29e      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xc0>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff fb2a 	bl	8001f10 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff fb26 	bl	8001f10 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e28a      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	4b60      	ldr	r3, [pc, #384]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d075      	beq.n	80029da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ee:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d102      	bne.n	800290e <HAL_RCC_OscConfig+0x136>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d002      	beq.n	8002914 <HAL_RCC_OscConfig+0x13c>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d11f      	bne.n	8002954 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002914:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x154>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e25d      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4946      	ldr	r1, [pc, #280]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002940:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fa97 	bl	8001e78 <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d043      	beq.n	80029d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e249      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d023      	beq.n	80029a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7ff fad2 	bl	8001f10 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002970:	f7ff face 	bl	8001f10 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e232      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002982:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	061b      	lsls	r3, r3, #24
 800299c:	492d      	ldr	r1, [pc, #180]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e01a      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80029aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7ff faae 	bl	8001f10 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff faaa 	bl	8001f10 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e20e      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1e0>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d041      	beq.n	8002a6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7ff fa87 	bl	8001f10 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a06:	f7ff fa83 	bl	8001f10 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1e7      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <HAL_RCC_OscConfig+0x22e>
 8002a26:	e020      	b.n	8002a6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7ff fa6a 	bl	8001f10 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3e:	e00d      	b.n	8002a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7ff fa66 	bl	8001f10 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d906      	bls.n	8002a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1ca      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ea      	bne.n	8002a40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80a6 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a7c:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2b4>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x2b6>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4a7e      	ldr	r2, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9e:	4b7c      	ldr	r3, [pc, #496]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b79      	ldr	r3, [pc, #484]	; (8002c94 <HAL_RCC_OscConfig+0x4bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x4bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a75      	ldr	r2, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x4bc>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff fa23 	bl	8001f10 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7ff fa1f 	bl	8001f10 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e183      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x4bc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_RCC_OscConfig+0x32e>
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	e024      	b.n	8002b50 <HAL_RCC_OscConfig+0x378>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d110      	bne.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002b0e:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a5e      	ldr	r2, [pc, #376]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1e:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	4a5a      	ldr	r2, [pc, #360]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCC_OscConfig+0x378>
 8002b30:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d016      	beq.n	8002b86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff f9da 	bl	8001f10 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7ff f9d6 	bl	8001f10 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e138      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ed      	beq.n	8002b60 <HAL_RCC_OscConfig+0x388>
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7ff f9c3 	bl	8001f10 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7ff f9bf 	bl	8001f10 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e121      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ed      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bde:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7ff f992 	bl	8001f10 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf0:	f7ff f98e 	bl	8001f10 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0f2      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x418>
 8002c10:	e01b      	b.n	8002c4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7ff f975 	bl	8001f10 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c2a:	f7ff f971 	bl	8001f10 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0d5      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ef      	bne.n	8002c2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80c9 	beq.w	8002de6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	f000 8083 	beq.w	8002d68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d15e      	bne.n	8002d28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <HAL_RCC_OscConfig+0x4b8>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7ff f94b 	bl	8001f10 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	e00c      	b.n	8002c98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7ff f947 	bl	8001f10 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d905      	bls.n	8002c98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0ab      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c98:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ec      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca4:	4b52      	ldr	r3, [pc, #328]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <HAL_RCC_OscConfig+0x61c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6a11      	ldr	r1, [r2, #32]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb4:	3a01      	subs	r2, #1
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cbe:	0212      	lsls	r2, r2, #8
 8002cc0:	4311      	orrs	r1, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cc6:	0852      	lsrs	r2, r2, #1
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	0552      	lsls	r2, r2, #21
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0652      	lsls	r2, r2, #25
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cde:	06d2      	lsls	r2, r2, #27
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	4943      	ldr	r1, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7ff f906 	bl	8001f10 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7ff f902 	bl	8001f10 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e066      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1a:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x530>
 8002d26:	e05e      	b.n	8002de6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7ff f8ec 	bl	8001f10 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7ff f8e8 	bl	8001f10 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e04c      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d5a:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	4924      	ldr	r1, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_OscConfig+0x620>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60cb      	str	r3, [r1, #12]
 8002d66:	e03e      	b.n	8002de6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e039      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_RCC_OscConfig+0x618>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d12c      	bne.n	8002de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	3b01      	subs	r3, #1
 8002d94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d123      	bne.n	8002de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d11b      	bne.n	8002de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d113      	bne.n	8002de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	019f800c 	.word	0x019f800c
 8002df8:	feeefffc 	.word	0xfeeefffc

08002dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e11e      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b91      	ldr	r3, [pc, #580]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d910      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	498c      	ldr	r1, [pc, #560]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b8a      	ldr	r3, [pc, #552]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e106      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d073      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d129      	bne.n	8002eac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e58:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0f4      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e68:	f000 f99e 	bl	80031a8 <RCC_GetSysClockFreqFromPLLSource>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4a7c      	ldr	r2, [pc, #496]	; (8003064 <HAL_RCC_ClockConfig+0x268>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d93f      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e76:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d033      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d12f      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9e:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e024      	b.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0c6      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0be      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ed4:	f000 f8ce 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_RCC_ClockConfig+0x268>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d909      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eea:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4957      	ldr	r1, [pc, #348]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f08:	f7ff f802 	bl	8001f10 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fe fffe 	bl	8001f10 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e095      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a42      	ldr	r2, [pc, #264]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f68:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f70:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4936      	ldr	r1, [pc, #216]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d105      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4a32      	ldr	r2, [pc, #200]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d21d      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 020f 	bic.w	r2, r3, #15
 8002fb4:	4929      	ldr	r1, [pc, #164]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe ffa8 	bl	8001f10 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fe ffa4 	bl	8001f10 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e03b      	b.n	8003052 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1ed      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490f      	ldr	r1, [pc, #60]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003026:	f000 f825 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_RCC_ClockConfig+0x264>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490c      	ldr	r1, [pc, #48]	; (8003068 <HAL_RCC_ClockConfig+0x26c>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff14 	bl	8001e78 <HAL_InitTick>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	04c4b400 	.word	0x04c4b400
 8003068:	08007c28 	.word	0x08007c28
 800306c:	20000000 	.word	0x20000000
 8003070:	20000004 	.word	0x20000004

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d102      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	e047      	b.n	800311c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d102      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCC_GetSysClockFreq+0xc0>)
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e03e      	b.n	800311c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800309e:	4b23      	ldr	r3, [pc, #140]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d136      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3301      	adds	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030c8:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	4a16      	ldr	r2, [pc, #88]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d2:	68d2      	ldr	r2, [r2, #12]
 80030d4:	0a12      	lsrs	r2, r2, #8
 80030d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	617b      	str	r3, [r7, #20]
      break;
 80030e0:	e00c      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	4a10      	ldr	r2, [pc, #64]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	0a12      	lsrs	r2, r2, #8
 80030f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
      break;
 80030fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0e5b      	lsrs	r3, r3, #25
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	e001      	b.n	800311c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800311c:	693b      	ldr	r3, [r7, #16]
}
 800311e:	4618      	mov	r0, r3
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	00f42400 	.word	0x00f42400
 8003134:	016e3600 	.word	0x016e3600

08003138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_RCC_GetHCLKFreq+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003154:	f7ff fff0 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4904      	ldr	r1, [pc, #16]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08007c38 	.word	0x08007c38

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003180:	f7ff ffda 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0adb      	lsrs	r3, r3, #11
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4904      	ldr	r1, [pc, #16]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08007c38 	.word	0x08007c38

080031a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d10c      	bne.n	80031e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031cc:	4a17      	ldr	r2, [pc, #92]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d6:	68d2      	ldr	r2, [r2, #12]
 80031d8:	0a12      	lsrs	r2, r2, #8
 80031da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
    break;
 80031e4:	e00c      	b.n	8003200 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	0a12      	lsrs	r2, r2, #8
 80031f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031f8:	fb02 f303 	mul.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
    break;
 80031fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0e5b      	lsrs	r3, r3, #25
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800321a:	687b      	ldr	r3, [r7, #4]
}
 800321c:	4618      	mov	r0, r3
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000
 800322c:	016e3600 	.word	0x016e3600
 8003230:	00f42400 	.word	0x00f42400

08003234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800323c:	2300      	movs	r3, #0
 800323e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003240:	2300      	movs	r3, #0
 8003242:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8098 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b40      	ldr	r3, [pc, #256]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a39      	ldr	r2, [pc, #228]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800328a:	f7fe fe41 	bl	8001f10 <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003290:	e009      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003292:	f7fe fe3d 	bl	8001f10 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d902      	bls.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	74fb      	strb	r3, [r7, #19]
        break;
 80032a4:	e005      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032a6:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d159      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01e      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d019      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e0:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe fdfd 	bl	8001f10 <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003318:	e00b      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fdf9 	bl	8001f10 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d902      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	74fb      	strb	r3, [r7, #19]
            break;
 8003330:	e006      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ec      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800335c:	e008      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	74bb      	strb	r3, [r7, #18]
 8003362:	e005      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4ba6      	ldr	r3, [pc, #664]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4aa5      	ldr	r2, [pc, #660]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4ba0      	ldr	r3, [pc, #640]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	499c      	ldr	r1, [pc, #624]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b97      	ldr	r3, [pc, #604]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4994      	ldr	r1, [pc, #592]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	498b      	ldr	r1, [pc, #556]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	4b86      	ldr	r3, [pc, #536]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	4983      	ldr	r1, [pc, #524]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003416:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	497a      	ldr	r1, [pc, #488]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003438:	4b75      	ldr	r3, [pc, #468]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	4972      	ldr	r1, [pc, #456]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345a:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4969      	ldr	r1, [pc, #420]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347c:	4b64      	ldr	r3, [pc, #400]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4961      	ldr	r1, [pc, #388]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349e:	4b5c      	ldr	r3, [pc, #368]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	4958      	ldr	r1, [pc, #352]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	4950      	ldr	r1, [pc, #320]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b4b      	ldr	r3, [pc, #300]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a4a      	ldr	r2, [pc, #296]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f8:	4b45      	ldr	r3, [pc, #276]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	4942      	ldr	r1, [pc, #264]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003518:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003522:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003530:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4934      	ldr	r1, [pc, #208]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a2e      	ldr	r2, [pc, #184]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	4926      	ldr	r1, [pc, #152]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a20      	ldr	r2, [pc, #128]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	4918      	ldr	r1, [pc, #96]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	490a      	ldr	r1, [pc, #40]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003604:	7cbb      	ldrb	r3, [r7, #18]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e049      	b.n	80036ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe f9ea 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fc30 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e049      	b.n	8003768 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fe f9ed 	bl	8001ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f000 fbd9 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_TIM_PWM_Start+0x24>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e03c      	b.n	800380e <HAL_TIM_PWM_Start+0x9e>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d109      	bne.n	80037ae <HAL_TIM_PWM_Start+0x3e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e02f      	b.n	800380e <HAL_TIM_PWM_Start+0x9e>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d109      	bne.n	80037c8 <HAL_TIM_PWM_Start+0x58>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e022      	b.n	800380e <HAL_TIM_PWM_Start+0x9e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d109      	bne.n	80037e2 <HAL_TIM_PWM_Start+0x72>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e015      	b.n	800380e <HAL_TIM_PWM_Start+0x9e>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_PWM_Start+0x8c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e008      	b.n	800380e <HAL_TIM_PWM_Start+0x9e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e097      	b.n	8003946 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xb6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003824:	e023      	b.n	800386e <HAL_TIM_PWM_Start+0xfe>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d104      	bne.n	8003836 <HAL_TIM_PWM_Start+0xc6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	e01b      	b.n	800386e <HAL_TIM_PWM_Start+0xfe>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Start+0xd6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	e013      	b.n	800386e <HAL_TIM_PWM_Start+0xfe>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start+0xe6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003854:	e00b      	b.n	800386e <HAL_TIM_PWM_Start+0xfe>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b10      	cmp	r3, #16
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start+0xf6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	e003      	b.n	800386e <HAL_TIM_PWM_Start+0xfe>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2201      	movs	r2, #1
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 ff4c 	bl	8004714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a33      	ldr	r2, [pc, #204]	; (8003950 <HAL_TIM_PWM_Start+0x1e0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_TIM_PWM_Start+0x13e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a32      	ldr	r2, [pc, #200]	; (8003954 <HAL_TIM_PWM_Start+0x1e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_TIM_PWM_Start+0x13e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <HAL_TIM_PWM_Start+0x1e8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_TIM_PWM_Start+0x13e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2f      	ldr	r2, [pc, #188]	; (800395c <HAL_TIM_PWM_Start+0x1ec>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIM_PWM_Start+0x13e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <HAL_TIM_PWM_Start+0x1f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_Start+0x142>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_PWM_Start+0x144>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <HAL_TIM_PWM_Start+0x1e0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_TIM_PWM_Start+0x194>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d013      	beq.n	8003904 <HAL_TIM_PWM_Start+0x194>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <HAL_TIM_PWM_Start+0x1f4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_TIM_PWM_Start+0x194>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_TIM_PWM_Start+0x1f8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_TIM_PWM_Start+0x194>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_TIM_PWM_Start+0x1e4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_TIM_PWM_Start+0x194>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <HAL_TIM_PWM_Start+0x1e8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d115      	bne.n	8003930 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <HAL_TIM_PWM_Start+0x1fc>)
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d015      	beq.n	8003942 <HAL_TIM_PWM_Start+0x1d2>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391c:	d011      	beq.n	8003942 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	e008      	b.n	8003942 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e000      	b.n	8003944 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40013400 	.word	0x40013400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	00010007 	.word	0x00010007

08003970 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fec6 	bl	8004714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a3e      	ldr	r2, [pc, #248]	; (8003a88 <HAL_TIM_PWM_Stop+0x118>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_TIM_PWM_Stop+0x4a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a3d      	ldr	r2, [pc, #244]	; (8003a8c <HAL_TIM_PWM_Stop+0x11c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_PWM_Stop+0x4a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3b      	ldr	r2, [pc, #236]	; (8003a90 <HAL_TIM_PWM_Stop+0x120>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_PWM_Stop+0x4a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3a      	ldr	r2, [pc, #232]	; (8003a94 <HAL_TIM_PWM_Stop+0x124>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_PWM_Stop+0x4a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a38      	ldr	r2, [pc, #224]	; (8003a98 <HAL_TIM_PWM_Stop+0x128>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PWM_Stop+0x4e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_PWM_Stop+0x50>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d017      	beq.n	80039f4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <HAL_TIM_PWM_Stop+0x84>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a1a      	ldr	r2, [r3, #32]
 80039da:	f244 4344 	movw	r3, #17476	; 0x4444
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_PWM_Stop+0x84>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10f      	bne.n	8003a24 <HAL_TIM_PWM_Stop+0xb4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_PWM_Stop+0xb4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_TIM_PWM_Stop+0xc4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a32:	e023      	b.n	8003a7c <HAL_TIM_PWM_Stop+0x10c>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_PWM_Stop+0xd4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a42:	e01b      	b.n	8003a7c <HAL_TIM_PWM_Stop+0x10c>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d104      	bne.n	8003a54 <HAL_TIM_PWM_Stop+0xe4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a52:	e013      	b.n	8003a7c <HAL_TIM_PWM_Stop+0x10c>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d104      	bne.n	8003a64 <HAL_TIM_PWM_Stop+0xf4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a62:	e00b      	b.n	8003a7c <HAL_TIM_PWM_Stop+0x10c>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d104      	bne.n	8003a74 <HAL_TIM_PWM_Stop+0x104>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a72:	e003      	b.n	8003a7c <HAL_TIM_PWM_Stop+0x10c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800

08003a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0ff      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b14      	cmp	r3, #20
 8003ac6:	f200 80f0 	bhi.w	8003caa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003cab 	.word	0x08003cab
 8003ad8:	08003cab 	.word	0x08003cab
 8003adc:	08003cab 	.word	0x08003cab
 8003ae0:	08003b65 	.word	0x08003b65
 8003ae4:	08003cab 	.word	0x08003cab
 8003ae8:	08003cab 	.word	0x08003cab
 8003aec:	08003cab 	.word	0x08003cab
 8003af0:	08003ba7 	.word	0x08003ba7
 8003af4:	08003cab 	.word	0x08003cab
 8003af8:	08003cab 	.word	0x08003cab
 8003afc:	08003cab 	.word	0x08003cab
 8003b00:	08003be7 	.word	0x08003be7
 8003b04:	08003cab 	.word	0x08003cab
 8003b08:	08003cab 	.word	0x08003cab
 8003b0c:	08003cab 	.word	0x08003cab
 8003b10:	08003c29 	.word	0x08003c29
 8003b14:	08003cab 	.word	0x08003cab
 8003b18:	08003cab 	.word	0x08003cab
 8003b1c:	08003cab 	.word	0x08003cab
 8003b20:	08003c69 	.word	0x08003c69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa60 	bl	8003ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0208 	orr.w	r2, r2, #8
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	619a      	str	r2, [r3, #24]
      break;
 8003b62:	e0a5      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fad0 	bl	8004110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
      break;
 8003ba4:	e084      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb39 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0204 	bic.w	r2, r2, #4
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
      break;
 8003be4:	e064      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fba1 	bl	8004334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	61da      	str	r2, [r3, #28]
      break;
 8003c26:	e043      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fc0a 	bl	8004448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003c66:	e023      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fc4e 	bl	8004510 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003ca8:	e002      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
      break;
 8003cae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop

08003cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0de      	b.n	8003e9e <HAL_TIM_ConfigClockSource+0x1da>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	f000 80a9 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d20:	4a61      	ldr	r2, [pc, #388]	; (8003ea8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	f200 80ae 	bhi.w	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d28:	4a60      	ldr	r2, [pc, #384]	; (8003eac <HAL_TIM_ConfigClockSource+0x1e8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f000 80a1 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d30:	4a5e      	ldr	r2, [pc, #376]	; (8003eac <HAL_TIM_ConfigClockSource+0x1e8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f200 80a6 	bhi.w	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d38:	4a5d      	ldr	r2, [pc, #372]	; (8003eb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f000 8099 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d40:	4a5b      	ldr	r2, [pc, #364]	; (8003eb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f200 809e 	bhi.w	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d48:	4a5a      	ldr	r2, [pc, #360]	; (8003eb4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f000 8091 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d50:	4a58      	ldr	r2, [pc, #352]	; (8003eb4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f200 8096 	bhi.w	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d5c:	f000 8089 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d64:	f200 808e 	bhi.w	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6c:	d03e      	beq.n	8003dec <HAL_TIM_ConfigClockSource+0x128>
 8003d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d72:	f200 8087 	bhi.w	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	f000 8086 	beq.w	8003e8a <HAL_TIM_ConfigClockSource+0x1c6>
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d82:	d87f      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d84:	2b70      	cmp	r3, #112	; 0x70
 8003d86:	d01a      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0xfa>
 8003d88:	2b70      	cmp	r3, #112	; 0x70
 8003d8a:	d87b      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d8c:	2b60      	cmp	r3, #96	; 0x60
 8003d8e:	d050      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
 8003d90:	2b60      	cmp	r3, #96	; 0x60
 8003d92:	d877      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d94:	2b50      	cmp	r3, #80	; 0x50
 8003d96:	d03c      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x14e>
 8003d98:	2b50      	cmp	r3, #80	; 0x50
 8003d9a:	d873      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d058      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x18e>
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d86f      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003da4:	2b30      	cmp	r3, #48	; 0x30
 8003da6:	d064      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003da8:	2b30      	cmp	r3, #48	; 0x30
 8003daa:	d86b      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d060      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d867      	bhi.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d05c      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d05a      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x1ae>
 8003dbc:	e062      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	f000 fc81 	bl	80046d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	609a      	str	r2, [r3, #8]
      break;
 8003dea:	e04f      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	f000 fc6a 	bl	80046d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e03c      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f000 fbdc 	bl	80045dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2150      	movs	r1, #80	; 0x50
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fc35 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8003e30:	e02c      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f000 fbfb 	bl	800463a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2160      	movs	r1, #96	; 0x60
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc25 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8003e50:	e01c      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f000 fbbc 	bl	80045dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2140      	movs	r1, #64	; 0x40
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fc15 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8003e70:	e00c      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f000 fc0c 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8003e82:	e003      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
      break;
 8003e88:	e000      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00100070 	.word	0x00100070
 8003eac:	00100040 	.word	0x00100040
 8003eb0:	00100030 	.word	0x00100030
 8003eb4:	00100020 	.word	0x00100020

08003eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3f      	ldr	r2, [pc, #252]	; (8003fd8 <TIM_Base_SetConfig+0x120>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3e      	ldr	r2, [pc, #248]	; (8003fdc <TIM_Base_SetConfig+0x124>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <TIM_Base_SetConfig+0x128>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d108      	bne.n	8003f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a33      	ldr	r2, [pc, #204]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <TIM_Base_SetConfig+0x120>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <TIM_Base_SetConfig+0x124>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2e      	ldr	r2, [pc, #184]	; (8003fe0 <TIM_Base_SetConfig+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <TIM_Base_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <TIM_Base_SetConfig+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <TIM_Base_SetConfig+0x134>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <TIM_Base_SetConfig+0x128>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <TIM_Base_SetConfig+0x12c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <TIM_Base_SetConfig+0x130>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a14      	ldr	r2, [pc, #80]	; (8003fec <TIM_Base_SetConfig+0x134>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40013400 	.word	0x40013400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800

08003ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 0201 	bic.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0302 	bic.w	r3, r3, #2
 800403c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <TIM_OC1_SetConfig+0x10c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00f      	beq.n	8004070 <TIM_OC1_SetConfig+0x80>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <TIM_OC1_SetConfig+0x110>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00b      	beq.n	8004070 <TIM_OC1_SetConfig+0x80>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <TIM_OC1_SetConfig+0x114>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <TIM_OC1_SetConfig+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a29      	ldr	r2, [pc, #164]	; (8004108 <TIM_OC1_SetConfig+0x118>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_OC1_SetConfig+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <TIM_OC1_SetConfig+0x11c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10c      	bne.n	800408a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0308 	bic.w	r3, r3, #8
 8004076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <TIM_OC1_SetConfig+0x10c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_OC1_SetConfig+0xc2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <TIM_OC1_SetConfig+0x110>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_OC1_SetConfig+0xc2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <TIM_OC1_SetConfig+0x114>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_OC1_SetConfig+0xc2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <TIM_OC1_SetConfig+0x118>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_OC1_SetConfig+0xc2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a17      	ldr	r2, [pc, #92]	; (800410c <TIM_OC1_SetConfig+0x11c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d111      	bne.n	80040d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800

08004110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f023 0210 	bic.w	r2, r3, #16
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0320 	bic.w	r3, r3, #32
 800415e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a28      	ldr	r2, [pc, #160]	; (8004210 <TIM_OC2_SetConfig+0x100>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x6c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a27      	ldr	r2, [pc, #156]	; (8004214 <TIM_OC2_SetConfig+0x104>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10d      	bne.n	8004198 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <TIM_OC2_SetConfig+0x100>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00f      	beq.n	80041c0 <TIM_OC2_SetConfig+0xb0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <TIM_OC2_SetConfig+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_OC2_SetConfig+0xb0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <TIM_OC2_SetConfig+0x108>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_OC2_SetConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <TIM_OC2_SetConfig+0x10c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_OC2_SetConfig+0xb0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <TIM_OC2_SetConfig+0x110>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d113      	bne.n	80041e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40013400 	.word	0x40013400
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a27      	ldr	r2, [pc, #156]	; (8004320 <TIM_OC3_SetConfig+0xfc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_OC3_SetConfig+0x6a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a26      	ldr	r2, [pc, #152]	; (8004324 <TIM_OC3_SetConfig+0x100>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10d      	bne.n	80042aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <TIM_OC3_SetConfig+0xfc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <TIM_OC3_SetConfig+0xae>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <TIM_OC3_SetConfig+0x100>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_OC3_SetConfig+0xae>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <TIM_OC3_SetConfig+0x104>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_OC3_SetConfig+0xae>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a19      	ldr	r2, [pc, #100]	; (800432c <TIM_OC3_SetConfig+0x108>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_OC3_SetConfig+0xae>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a18      	ldr	r2, [pc, #96]	; (8004330 <TIM_OC3_SetConfig+0x10c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d113      	bne.n	80042fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40013400 	.word	0x40013400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	031b      	lsls	r3, r3, #12
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a28      	ldr	r2, [pc, #160]	; (8004434 <TIM_OC4_SetConfig+0x100>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_OC4_SetConfig+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a27      	ldr	r2, [pc, #156]	; (8004438 <TIM_OC4_SetConfig+0x104>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10d      	bne.n	80043bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	031b      	lsls	r3, r3, #12
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <TIM_OC4_SetConfig+0x100>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <TIM_OC4_SetConfig+0xb0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <TIM_OC4_SetConfig+0x104>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_OC4_SetConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <TIM_OC4_SetConfig+0x108>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_OC4_SetConfig+0xb0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <TIM_OC4_SetConfig+0x10c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC4_SetConfig+0xb0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a19      	ldr	r2, [pc, #100]	; (8004444 <TIM_OC4_SetConfig+0x110>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d113      	bne.n	800440c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40013400 	.word	0x40013400
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800

08004448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800448c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a17      	ldr	r2, [pc, #92]	; (80044fc <TIM_OC5_SetConfig+0xb4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_OC5_SetConfig+0x7a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a16      	ldr	r2, [pc, #88]	; (8004500 <TIM_OC5_SetConfig+0xb8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_OC5_SetConfig+0x7a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a15      	ldr	r2, [pc, #84]	; (8004504 <TIM_OC5_SetConfig+0xbc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_OC5_SetConfig+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a14      	ldr	r2, [pc, #80]	; (8004508 <TIM_OC5_SetConfig+0xc0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC5_SetConfig+0x7a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <TIM_OC5_SetConfig+0xc4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d109      	bne.n	80044d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800

08004510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	051b      	lsls	r3, r3, #20
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <TIM_OC6_SetConfig+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00f      	beq.n	800458c <TIM_OC6_SetConfig+0x7c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <TIM_OC6_SetConfig+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00b      	beq.n	800458c <TIM_OC6_SetConfig+0x7c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <TIM_OC6_SetConfig+0xc0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d007      	beq.n	800458c <TIM_OC6_SetConfig+0x7c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <TIM_OC6_SetConfig+0xc4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_OC6_SetConfig+0x7c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <TIM_OC6_SetConfig+0xc8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d109      	bne.n	80045a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	029b      	lsls	r3, r3, #10
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f023 0201 	bic.w	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 030a 	bic.w	r3, r3, #10
 8004618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463a:	b480      	push	{r7}
 800463c:	b087      	sub	sp, #28
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 0210 	bic.w	r2, r3, #16
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004676:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f043 0307 	orr.w	r3, r3, #7
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2201      	movs	r2, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	43db      	mvns	r3, r3
 8004736:	401a      	ands	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e065      	b.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2c      	ldr	r2, [pc, #176]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2b      	ldr	r2, [pc, #172]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d018      	beq.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d013      	beq.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a12      	ldr	r2, [pc, #72]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10c      	bne.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40013400 	.word	0x40013400
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40014000 	.word	0x40014000

08004864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e073      	b.n	8004968 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	; (8004974 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d11c      	bne.n	8004956 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	051b      	lsls	r3, r3, #20
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400

0800497c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e042      	b.n	8004a14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fd f9c7 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2224      	movs	r2, #36	; 0x24
 80049aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 ff12 	bl	80057f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fc43 	bl	8005258 <UART_SetConfig>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e01b      	b.n	8004a14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 ff91 	bl	8005934 <UART_CheckIdleState>
 8004a12:	4603      	mov	r3, r0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d17b      	bne.n	8004b2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_UART_Transmit+0x26>
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e074      	b.n	8004b30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a56:	f7fd fa5b 	bl	8001f10 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d108      	bne.n	8004a88 <HAL_UART_Transmit+0x6c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e003      	b.n	8004a90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a90:	e030      	b.n	8004af4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fff3 	bl	8005a88 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e03d      	b.n	8004b30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	3302      	adds	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e007      	b.n	8004ae2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1c8      	bne.n	8004a92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 ffbc 	bl	8005a88 <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e006      	b.n	8004b30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d137      	bne.n	8004bc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Receive_IT+0x24>
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e030      	b.n	8004bc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_UART_Receive_IT+0x94>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01f      	beq.n	8004bb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69f9      	ldr	r1, [r7, #28]
 8004ba2:	6a3a      	ldr	r2, [r7, #32]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 ffd4 	bl	8005b64 <UART_Start_Receive_IT>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3728      	adds	r7, #40	; 0x28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40008000 	.word	0x40008000

08004bd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0ba      	sub	sp, #232	; 0xe8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004bfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004bfe:	4013      	ands	r3, r2
 8004c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11b      	bne.n	8004c44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 82e3 	beq.w	8005200 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
      }
      return;
 8004c42:	e2dd      	b.n	8005200 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8123 	beq.w	8004e94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c52:	4b8d      	ldr	r3, [pc, #564]	; (8004e88 <HAL_UART_IRQHandler+0x2b8>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c5e:	4b8b      	ldr	r3, [pc, #556]	; (8004e8c <HAL_UART_IRQHandler+0x2bc>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8116 	beq.w	8004e94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d011      	beq.n	8004c98 <HAL_UART_IRQHandler+0xc8>
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d011      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xf8>
 8004ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d011      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x128>
 8004cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d017      	beq.n	8004d34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d14:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <HAL_UART_IRQHandler+0x2b8>)
 8004d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2208      	movs	r2, #8
 8004d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f043 0208 	orr.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d012      	beq.n	8004d66 <HAL_UART_IRQHandler+0x196>
 8004d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00c      	beq.n	8004d66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f043 0220 	orr.w	r2, r3, #32
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8249 	beq.w	8005204 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d013      	beq.n	8004da6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d054      	beq.n	8004e74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 ffec 	bl	8005da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d146      	bne.n	8004e6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1d9      	bne.n	8004dde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d017      	beq.n	8004e64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_UART_IRQHandler+0x2c0>)
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fd f9f9 	bl	800223c <HAL_DMA_Abort_IT>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d019      	beq.n	8004e84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e62:	e00f      	b.n	8004e84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9e1 	bl	800522c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6a:	e00b      	b.n	8004e84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f9dd 	bl	800522c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e72:	e007      	b.n	8004e84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f9d9 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004e82:	e1bf      	b.n	8005204 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	bf00      	nop
    return;
 8004e86:	e1bd      	b.n	8005204 <HAL_UART_IRQHandler+0x634>
 8004e88:	10000001 	.word	0x10000001
 8004e8c:	04000120 	.word	0x04000120
 8004e90:	08005e75 	.word	0x08005e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f040 8153 	bne.w	8005144 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 814c 	beq.w	8005144 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8145 	beq.w	8005144 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	f040 80bb 	bne.w	8005048 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 818f 	beq.w	8005208 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	f080 8187 	bcs.w	8005208 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 8087 	bne.w	8005026 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1da      	bne.n	8004f18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e1      	bne.n	8004f62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e3      	bne.n	8004f9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005006:	65bb      	str	r3, [r7, #88]	; 0x58
 8005008:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800500c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e4      	bne.n	8004fe4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005020:	4618      	mov	r0, r3
 8005022:	f7fd f8b2 	bl	800218a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005038:	b29b      	uxth	r3, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	b29b      	uxth	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8fd 	bl	8005240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005046:	e0df      	b.n	8005208 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005054:	b29b      	uxth	r3, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80d1 	beq.w	800520c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800506a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80cc 	beq.w	800520c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
 8005098:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800509c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e4      	bne.n	8005074 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050d2:	633a      	str	r2, [r7, #48]	; 0x30
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e1      	bne.n	80050aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	60fb      	str	r3, [r7, #12]
   return(result);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0310 	bic.w	r3, r3, #16
 800510e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	69b9      	ldr	r1, [r7, #24]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	617b      	str	r3, [r7, #20]
   return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e4      	bne.n	80050fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005136:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f87f 	bl	8005240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005142:	e063      	b.n	800520c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <HAL_UART_IRQHandler+0x59e>
 8005150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 fbe2 	bl	8006930 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800516c:	e051      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800517a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d105      	bne.n	8005192 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800518a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005196:	2b00      	cmp	r3, #0
 8005198:	d03a      	beq.n	8005210 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
    }
    return;
 80051a2:	e035      	b.n	8005210 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_UART_IRQHandler+0x5f4>
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fe6f 	bl	8005ea0 <UART_EndTransmit_IT>
    return;
 80051c2:	e026      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_UART_IRQHandler+0x614>
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fbbb 	bl	8006958 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051e2:	e016      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <HAL_UART_IRQHandler+0x642>
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da0c      	bge.n	8005212 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fba3 	bl	8006944 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051fe:	e008      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
      return;
 8005200:	bf00      	nop
 8005202:	e006      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
    return;
 8005204:	bf00      	nop
 8005206:	e004      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
      return;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
      return;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_UART_IRQHandler+0x642>
    return;
 8005210:	bf00      	nop
  }
}
 8005212:	37e8      	adds	r7, #232	; 0xe8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b08c      	sub	sp, #48	; 0x30
 800525e:	af00      	add	r7, sp, #0
 8005260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	431a      	orrs	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	431a      	orrs	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4313      	orrs	r3, r2
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4bab      	ldr	r3, [pc, #684]	; (8005534 <UART_SetConfig+0x2dc>)
 8005288:	4013      	ands	r3, r2
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005290:	430b      	orrs	r3, r1
 8005292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4aa0      	ldr	r2, [pc, #640]	; (8005538 <UART_SetConfig+0x2e0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d8:	430b      	orrs	r3, r1
 80052da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	f023 010f 	bic.w	r1, r3, #15
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a91      	ldr	r2, [pc, #580]	; (800553c <UART_SetConfig+0x2e4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d125      	bne.n	8005348 <UART_SetConfig+0xf0>
 80052fc:	4b90      	ldr	r3, [pc, #576]	; (8005540 <UART_SetConfig+0x2e8>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d81a      	bhi.n	8005340 <UART_SetConfig+0xe8>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <UART_SetConfig+0xb8>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005321 	.word	0x08005321
 8005314:	08005331 	.word	0x08005331
 8005318:	08005329 	.word	0x08005329
 800531c:	08005339 	.word	0x08005339
 8005320:	2301      	movs	r3, #1
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005326:	e0d6      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005328:	2302      	movs	r3, #2
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532e:	e0d2      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005330:	2304      	movs	r3, #4
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005336:	e0ce      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005338:	2308      	movs	r3, #8
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533e:	e0ca      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005340:	2310      	movs	r3, #16
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005346:	e0c6      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a7d      	ldr	r2, [pc, #500]	; (8005544 <UART_SetConfig+0x2ec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d138      	bne.n	80053c4 <UART_SetConfig+0x16c>
 8005352:	4b7b      	ldr	r3, [pc, #492]	; (8005540 <UART_SetConfig+0x2e8>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d82d      	bhi.n	80053bc <UART_SetConfig+0x164>
 8005360:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x110>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080053bd 	.word	0x080053bd
 8005370:	080053bd 	.word	0x080053bd
 8005374:	080053bd 	.word	0x080053bd
 8005378:	080053ad 	.word	0x080053ad
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053bd 	.word	0x080053bd
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053bd 	.word	0x080053bd
 8005390:	080053bd 	.word	0x080053bd
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053b5 	.word	0x080053b5
 800539c:	2300      	movs	r3, #0
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a2:	e098      	b.n	80054d6 <UART_SetConfig+0x27e>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053aa:	e094      	b.n	80054d6 <UART_SetConfig+0x27e>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b2:	e090      	b.n	80054d6 <UART_SetConfig+0x27e>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ba:	e08c      	b.n	80054d6 <UART_SetConfig+0x27e>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c2:	e088      	b.n	80054d6 <UART_SetConfig+0x27e>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5f      	ldr	r2, [pc, #380]	; (8005548 <UART_SetConfig+0x2f0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d125      	bne.n	800541a <UART_SetConfig+0x1c2>
 80053ce:	4b5c      	ldr	r3, [pc, #368]	; (8005540 <UART_SetConfig+0x2e8>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d016      	beq.n	800540a <UART_SetConfig+0x1b2>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d818      	bhi.n	8005412 <UART_SetConfig+0x1ba>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d00a      	beq.n	80053fa <UART_SetConfig+0x1a2>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d814      	bhi.n	8005412 <UART_SetConfig+0x1ba>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <UART_SetConfig+0x19a>
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d008      	beq.n	8005402 <UART_SetConfig+0x1aa>
 80053f0:	e00f      	b.n	8005412 <UART_SetConfig+0x1ba>
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f8:	e06d      	b.n	80054d6 <UART_SetConfig+0x27e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005400:	e069      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005402:	2304      	movs	r3, #4
 8005404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005408:	e065      	b.n	80054d6 <UART_SetConfig+0x27e>
 800540a:	2308      	movs	r3, #8
 800540c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005410:	e061      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005412:	2310      	movs	r3, #16
 8005414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005418:	e05d      	b.n	80054d6 <UART_SetConfig+0x27e>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4b      	ldr	r2, [pc, #300]	; (800554c <UART_SetConfig+0x2f4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d125      	bne.n	8005470 <UART_SetConfig+0x218>
 8005424:	4b46      	ldr	r3, [pc, #280]	; (8005540 <UART_SetConfig+0x2e8>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542e:	2bc0      	cmp	r3, #192	; 0xc0
 8005430:	d016      	beq.n	8005460 <UART_SetConfig+0x208>
 8005432:	2bc0      	cmp	r3, #192	; 0xc0
 8005434:	d818      	bhi.n	8005468 <UART_SetConfig+0x210>
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d00a      	beq.n	8005450 <UART_SetConfig+0x1f8>
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d814      	bhi.n	8005468 <UART_SetConfig+0x210>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <UART_SetConfig+0x1f0>
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d008      	beq.n	8005458 <UART_SetConfig+0x200>
 8005446:	e00f      	b.n	8005468 <UART_SetConfig+0x210>
 8005448:	2300      	movs	r3, #0
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544e:	e042      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005450:	2302      	movs	r3, #2
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005456:	e03e      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800545e:	e03a      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005466:	e036      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800546e:	e032      	b.n	80054d6 <UART_SetConfig+0x27e>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a30      	ldr	r2, [pc, #192]	; (8005538 <UART_SetConfig+0x2e0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d12a      	bne.n	80054d0 <UART_SetConfig+0x278>
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <UART_SetConfig+0x2e8>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005488:	d01a      	beq.n	80054c0 <UART_SetConfig+0x268>
 800548a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800548e:	d81b      	bhi.n	80054c8 <UART_SetConfig+0x270>
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005494:	d00c      	beq.n	80054b0 <UART_SetConfig+0x258>
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549a:	d815      	bhi.n	80054c8 <UART_SetConfig+0x270>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <UART_SetConfig+0x250>
 80054a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a4:	d008      	beq.n	80054b8 <UART_SetConfig+0x260>
 80054a6:	e00f      	b.n	80054c8 <UART_SetConfig+0x270>
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ae:	e012      	b.n	80054d6 <UART_SetConfig+0x27e>
 80054b0:	2302      	movs	r3, #2
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b6:	e00e      	b.n	80054d6 <UART_SetConfig+0x27e>
 80054b8:	2304      	movs	r3, #4
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054be:	e00a      	b.n	80054d6 <UART_SetConfig+0x27e>
 80054c0:	2308      	movs	r3, #8
 80054c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c6:	e006      	b.n	80054d6 <UART_SetConfig+0x27e>
 80054c8:	2310      	movs	r3, #16
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ce:	e002      	b.n	80054d6 <UART_SetConfig+0x27e>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <UART_SetConfig+0x2e0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	f040 80a8 	bne.w	8005632 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d834      	bhi.n	8005554 <UART_SetConfig+0x2fc>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <UART_SetConfig+0x298>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005555 	.word	0x08005555
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005523 	.word	0x08005523
 8005504:	08005555 	.word	0x08005555
 8005508:	08005555 	.word	0x08005555
 800550c:	08005555 	.word	0x08005555
 8005510:	0800552b 	.word	0x0800552b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7fd fe1c 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8005518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800551a:	e021      	b.n	8005560 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <UART_SetConfig+0x2f8>)
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005520:	e01e      	b.n	8005560 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005522:	f7fd fda7 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005528:	e01a      	b.n	8005560 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005530:	e016      	b.n	8005560 <UART_SetConfig+0x308>
 8005532:	bf00      	nop
 8005534:	cfff69f3 	.word	0xcfff69f3
 8005538:	40008000 	.word	0x40008000
 800553c:	40013800 	.word	0x40013800
 8005540:	40021000 	.word	0x40021000
 8005544:	40004400 	.word	0x40004400
 8005548:	40004800 	.word	0x40004800
 800554c:	40004c00 	.word	0x40004c00
 8005550:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800555e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 812a 	beq.w	80057bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	4a9e      	ldr	r2, [pc, #632]	; (80057e8 <UART_SetConfig+0x590>)
 800556e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005572:	461a      	mov	r2, r3
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	fbb3 f3f2 	udiv	r3, r3, r2
 800557a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4413      	add	r3, r2
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	429a      	cmp	r2, r3
 800558a:	d305      	bcc.n	8005598 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	429a      	cmp	r2, r3
 8005596:	d903      	bls.n	80055a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800559e:	e10d      	b.n	80057bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2200      	movs	r2, #0
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	60fa      	str	r2, [r7, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	4a8e      	ldr	r2, [pc, #568]	; (80057e8 <UART_SetConfig+0x590>)
 80055ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2200      	movs	r2, #0
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055c2:	f7fa fe29 	bl	8000218 <__aeabi_uldivmod>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	020b      	lsls	r3, r1, #8
 80055d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055dc:	0202      	lsls	r2, r0, #8
 80055de:	6979      	ldr	r1, [r7, #20]
 80055e0:	6849      	ldr	r1, [r1, #4]
 80055e2:	0849      	lsrs	r1, r1, #1
 80055e4:	2000      	movs	r0, #0
 80055e6:	460c      	mov	r4, r1
 80055e8:	4605      	mov	r5, r0
 80055ea:	eb12 0804 	adds.w	r8, r2, r4
 80055ee:	eb43 0905 	adc.w	r9, r3, r5
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	469a      	mov	sl, r3
 80055fa:	4693      	mov	fp, r2
 80055fc:	4652      	mov	r2, sl
 80055fe:	465b      	mov	r3, fp
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	f7fa fe08 	bl	8000218 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4613      	mov	r3, r2
 800560e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005616:	d308      	bcc.n	800562a <UART_SetConfig+0x3d2>
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800561e:	d204      	bcs.n	800562a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	60da      	str	r2, [r3, #12]
 8005628:	e0c8      	b.n	80057bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005630:	e0c4      	b.n	80057bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563a:	d167      	bne.n	800570c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800563c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005640:	2b08      	cmp	r3, #8
 8005642:	d828      	bhi.n	8005696 <UART_SetConfig+0x43e>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0x3f4>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005671 	.word	0x08005671
 8005650:	08005679 	.word	0x08005679
 8005654:	08005681 	.word	0x08005681
 8005658:	08005697 	.word	0x08005697
 800565c:	08005687 	.word	0x08005687
 8005660:	08005697 	.word	0x08005697
 8005664:	08005697 	.word	0x08005697
 8005668:	08005697 	.word	0x08005697
 800566c:	0800568f 	.word	0x0800568f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005670:	f7fd fd6e 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8005674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005676:	e014      	b.n	80056a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005678:	f7fd fd80 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 800567c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800567e:	e010      	b.n	80056a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005680:	4b5a      	ldr	r3, [pc, #360]	; (80057ec <UART_SetConfig+0x594>)
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005684:	e00d      	b.n	80056a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005686:	f7fd fcf5 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800568a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800568c:	e009      	b.n	80056a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005694:	e005      	b.n	80056a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8089 	beq.w	80057bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	4a4e      	ldr	r2, [pc, #312]	; (80057e8 <UART_SetConfig+0x590>)
 80056b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056bc:	005a      	lsls	r2, r3, #1
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	441a      	add	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	d916      	bls.n	8005704 <UART_SetConfig+0x4ac>
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056dc:	d212      	bcs.n	8005704 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f023 030f 	bic.w	r3, r3, #15
 80056e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	8bfb      	ldrh	r3, [r7, #30]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	8bfa      	ldrh	r2, [r7, #30]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	e05b      	b.n	80057bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800570a:	e057      	b.n	80057bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800570c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005710:	2b08      	cmp	r3, #8
 8005712:	d828      	bhi.n	8005766 <UART_SetConfig+0x50e>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <UART_SetConfig+0x4c4>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005741 	.word	0x08005741
 8005720:	08005749 	.word	0x08005749
 8005724:	08005751 	.word	0x08005751
 8005728:	08005767 	.word	0x08005767
 800572c:	08005757 	.word	0x08005757
 8005730:	08005767 	.word	0x08005767
 8005734:	08005767 	.word	0x08005767
 8005738:	08005767 	.word	0x08005767
 800573c:	0800575f 	.word	0x0800575f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005740:	f7fd fd06 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8005744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005746:	e014      	b.n	8005772 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005748:	f7fd fd18 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 800574c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800574e:	e010      	b.n	8005772 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005750:	4b26      	ldr	r3, [pc, #152]	; (80057ec <UART_SetConfig+0x594>)
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005754:	e00d      	b.n	8005772 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005756:	f7fd fc8d 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800575a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800575c:	e009      	b.n	8005772 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005764:	e005      	b.n	8005772 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005770:	bf00      	nop
    }

    if (pclk != 0U)
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d021      	beq.n	80057bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	4a1a      	ldr	r2, [pc, #104]	; (80057e8 <UART_SetConfig+0x590>)
 800577e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005782:	461a      	mov	r2, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	fbb3 f2f2 	udiv	r2, r3, r2
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	441a      	add	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d909      	bls.n	80057b6 <UART_SetConfig+0x55e>
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a8:	d205      	bcs.n	80057b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	e002      	b.n	80057bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2201      	movs	r2, #1
 80057c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80057d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3730      	adds	r7, #48	; 0x30
 80057e0:	46bd      	mov	sp, r7
 80057e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e6:	bf00      	nop
 80057e8:	08007c40 	.word	0x08007c40
 80057ec:	00f42400 	.word	0x00f42400

080057f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01a      	beq.n	8005906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ee:	d10a      	bne.n	8005906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b098      	sub	sp, #96	; 0x60
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005944:	f7fc fae4 	bl	8001f10 <HAL_GetTick>
 8005948:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d12f      	bne.n	80059b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005960:	2200      	movs	r2, #0
 8005962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f88e 	bl	8005a88 <UART_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d022      	beq.n	80059b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	653b      	str	r3, [r7, #80]	; 0x50
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005990:	647b      	str	r3, [r7, #68]	; 0x44
 8005992:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800599e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e6      	bne.n	8005972 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e063      	b.n	8005a80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d149      	bne.n	8005a5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ce:	2200      	movs	r2, #0
 80059d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f857 	bl	8005a88 <UART_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d03c      	beq.n	8005a5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	623b      	str	r3, [r7, #32]
   return(result);
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005a00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a32:	61fa      	str	r2, [r7, #28]
 8005a34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	69b9      	ldr	r1, [r7, #24]
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e012      	b.n	8005a80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3758      	adds	r7, #88	; 0x58
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a98:	e04f      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d04b      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7fc fa35 	bl	8001f10 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e04e      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d037      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d034      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d031      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d110      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f95b 	bl	8005da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2208      	movs	r2, #8
 8005af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e029      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b14:	d111      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f941 	bl	8005da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e00f      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d0a0      	beq.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b0a3      	sub	sp, #140	; 0x8c
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d10e      	bne.n	8005bb6 <UART_Start_Receive_IT+0x52>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <UART_Start_Receive_IT+0x48>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005baa:	e02d      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb4:	e028      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <UART_Start_Receive_IT+0x76>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <UART_Start_Receive_IT+0x6c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	22ff      	movs	r2, #255	; 0xff
 8005bca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bce:	e01b      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	227f      	movs	r2, #127	; 0x7f
 8005bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bd8:	e016      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be2:	d10d      	bne.n	8005c00 <UART_Start_Receive_IT+0x9c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <UART_Start_Receive_IT+0x92>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	227f      	movs	r2, #127	; 0x7f
 8005bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bf4:	e008      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	223f      	movs	r2, #63	; 0x3f
 8005bfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bfe:	e003      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2222      	movs	r2, #34	; 0x22
 8005c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c3c:	673a      	str	r2, [r7, #112]	; 0x70
 8005c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005c42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e3      	bne.n	8005c18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c58:	d14f      	bne.n	8005cfa <UART_Start_Receive_IT+0x196>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d349      	bcc.n	8005cfa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d107      	bne.n	8005c80 <UART_Start_Receive_IT+0x11c>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4a47      	ldr	r2, [pc, #284]	; (8005d98 <UART_Start_Receive_IT+0x234>)
 8005c7c:	675a      	str	r2, [r3, #116]	; 0x74
 8005c7e:	e002      	b.n	8005c86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a46      	ldr	r2, [pc, #280]	; (8005d9c <UART_Start_Receive_IT+0x238>)
 8005c84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01a      	beq.n	8005cc4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e4      	bne.n	8005c8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ce4:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e5      	bne.n	8005cc4 <UART_Start_Receive_IT+0x160>
 8005cf8:	e046      	b.n	8005d88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d107      	bne.n	8005d14 <UART_Start_Receive_IT+0x1b0>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a24      	ldr	r2, [pc, #144]	; (8005da0 <UART_Start_Receive_IT+0x23c>)
 8005d10:	675a      	str	r2, [r3, #116]	; 0x74
 8005d12:	e002      	b.n	8005d1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <UART_Start_Receive_IT+0x240>)
 8005d18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d019      	beq.n	8005d56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d36:	677b      	str	r3, [r7, #116]	; 0x74
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_Start_Receive_IT+0x1be>
 8005d54:	e018      	b.n	8005d88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	613b      	str	r3, [r7, #16]
   return(result);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f043 0320 	orr.w	r3, r3, #32
 8005d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	378c      	adds	r7, #140	; 0x8c
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	080065c9 	.word	0x080065c9
 8005d9c:	08006269 	.word	0x08006269
 8005da0:	080060b1 	.word	0x080060b1
 8005da4:	08005ef9 	.word	0x08005ef9

08005da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b095      	sub	sp, #84	; 0x54
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e6      	bne.n	8005db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3308      	adds	r3, #8
 8005de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e3      	bne.n	8005de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d118      	bne.n	8005e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0310 	bic.w	r3, r3, #16
 8005e36:	647b      	str	r3, [r7, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e6      	bne.n	8005e22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e68:	bf00      	nop
 8005e6a:	3754      	adds	r7, #84	; 0x54
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff f9ca 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6979      	ldr	r1, [r7, #20]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e6      	bne.n	8005ea8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff f995 	bl	8005218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eee:	bf00      	nop
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b09c      	sub	sp, #112	; 0x70
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f10:	2b22      	cmp	r3, #34	; 0x22
 8005f12:	f040 80be 	bne.w	8006092 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f24:	b2d9      	uxtb	r1, r3
 8005f26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f30:	400a      	ands	r2, r1
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 80a1 	bne.w	80060a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e6      	bne.n	8005f60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3308      	adds	r3, #8
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005fb2:	647a      	str	r2, [r7, #68]	; 0x44
 8005fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e5      	bne.n	8005f92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a33      	ldr	r2, [pc, #204]	; (80060ac <UART_RxISR_8BIT+0x1b4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01f      	beq.n	8006024 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006006:	663b      	str	r3, [r7, #96]	; 0x60
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
 8006012:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e6      	bne.n	8005ff2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d12e      	bne.n	800608a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0310 	bic.w	r3, r3, #16
 8006046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	617b      	str	r3, [r7, #20]
   return(result);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b10      	cmp	r3, #16
 8006070:	d103      	bne.n	800607a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2210      	movs	r2, #16
 8006078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff f8dc 	bl	8005240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006088:	e00b      	b.n	80060a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fa fd46 	bl	8000b1c <HAL_UART_RxCpltCallback>
}
 8006090:	e007      	b.n	80060a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0208 	orr.w	r2, r2, #8
 80060a0:	619a      	str	r2, [r3, #24]
}
 80060a2:	bf00      	nop
 80060a4:	3770      	adds	r7, #112	; 0x70
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40008000 	.word	0x40008000

080060b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b09c      	sub	sp, #112	; 0x70
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c8:	2b22      	cmp	r3, #34	; 0x22
 80060ca:	f040 80be 	bne.w	800624a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80060de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80060e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80060e6:	4013      	ands	r3, r2
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	f040 80a1 	bne.w	800625a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612c:	667b      	str	r3, [r7, #100]	; 0x64
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006136:	657b      	str	r3, [r7, #84]	; 0x54
 8006138:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800613c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e6      	bne.n	8006118 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	663b      	str	r3, [r7, #96]	; 0x60
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800616a:	643a      	str	r2, [r7, #64]	; 0x40
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a33      	ldr	r2, [pc, #204]	; (8006264 <UART_RxISR_16BIT+0x1b4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d01f      	beq.n	80061dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e6      	bne.n	80061aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d12e      	bne.n	8006242 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	613b      	str	r3, [r7, #16]
   return(result);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	2b10      	cmp	r3, #16
 8006228:	d103      	bne.n	8006232 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2210      	movs	r2, #16
 8006230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff f800 	bl	8005240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006240:	e00b      	b.n	800625a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fa fc6a 	bl	8000b1c <HAL_UART_RxCpltCallback>
}
 8006248:	e007      	b.n	800625a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0208 	orr.w	r2, r2, #8
 8006258:	619a      	str	r2, [r3, #24]
}
 800625a:	bf00      	nop
 800625c:	3770      	adds	r7, #112	; 0x70
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40008000 	.word	0x40008000

08006268 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b0ac      	sub	sp, #176	; 0xb0
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006276:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629e:	2b22      	cmp	r3, #34	; 0x22
 80062a0:	f040 8182 	bne.w	80065a8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80062aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062ae:	e125      	b.n	80064fc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80062be:	b2d9      	uxtb	r1, r3
 80062c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ca:	400a      	ands	r2, r1
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d053      	beq.n	80063aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d011      	beq.n	8006332 <UART_RxISR_8BIT_FIFOEN+0xca>
 800630e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006328:	f043 0201 	orr.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d011      	beq.n	8006362 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800633e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2202      	movs	r2, #2
 8006350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d011      	beq.n	8006392 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800636e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2204      	movs	r2, #4
 8006380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006388:	f043 0202 	orr.w	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fe ff45 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 80a2 	bne.w	80064fc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80063c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063dc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80063e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80063e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e4      	bne.n	80063b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80063fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006416:	66ba      	str	r2, [r7, #104]	; 0x68
 8006418:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800641c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e1      	bne.n	80063ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5f      	ldr	r2, [pc, #380]	; (80065c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d021      	beq.n	800648c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01a      	beq.n	800648c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800646a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006478:	657b      	str	r3, [r7, #84]	; 0x54
 800647a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800647e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d130      	bne.n	80064f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f023 0310 	bic.w	r3, r3, #16
 80064ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064bc:	643b      	str	r3, [r7, #64]	; 0x40
 80064be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e4      	bne.n	800649a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	2b10      	cmp	r3, #16
 80064dc:	d103      	bne.n	80064e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2210      	movs	r2, #16
 80064e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fe fea6 	bl	8005240 <HAL_UARTEx_RxEventCallback>
 80064f4:	e002      	b.n	80064fc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fa fb10 	bl	8000b1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	f47f aecf 	bne.w	80062b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006518:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800651c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006520:	2b00      	cmp	r3, #0
 8006522:	d049      	beq.n	80065b8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800652a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800652e:	429a      	cmp	r2, r3
 8006530:	d242      	bcs.n	80065b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	61fb      	str	r3, [r7, #28]
   return(result);
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800656e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	60bb      	str	r3, [r7, #8]
   return(result);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f043 0320 	orr.w	r3, r3, #32
 8006584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	613b      	str	r3, [r7, #16]
   return(result);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e4      	bne.n	8006570 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065a6:	e007      	b.n	80065b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0208 	orr.w	r2, r2, #8
 80065b6:	619a      	str	r2, [r3, #24]
}
 80065b8:	bf00      	nop
 80065ba:	37b0      	adds	r7, #176	; 0xb0
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40008000 	.word	0x40008000
 80065c4:	08005ef9 	.word	0x08005ef9

080065c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b0ae      	sub	sp, #184	; 0xb8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	2b22      	cmp	r3, #34	; 0x22
 8006600:	f040 8186 	bne.w	8006910 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800660a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800660e:	e129      	b.n	8006864 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006622:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006626:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800662a:	4013      	ands	r3, r2
 800662c:	b29a      	uxth	r2, r3
 800662e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800665a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d053      	beq.n	800670e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f043 0201 	orr.w	r2, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d011      	beq.n	80066c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80066a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2202      	movs	r2, #2
 80066b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066bc:	f043 0204 	orr.w	r2, r3, #4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d011      	beq.n	80066f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80066d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2204      	movs	r2, #4
 80066e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ec:	f043 0202 	orr.w	r2, r3, #2
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fe fd93 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	f040 80a4 	bne.w	8006864 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800672a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800672c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800673e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006742:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e2      	bne.n	800671c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800677e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800678c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e1      	bne.n	8006756 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a5f      	ldr	r2, [pc, #380]	; (8006928 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d021      	beq.n	80067f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01a      	beq.n	80067f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e4      	bne.n	80067be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d130      	bne.n	800685e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	f023 0310 	bic.w	r3, r3, #16
 8006816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
 8006826:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800682a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e4      	bne.n	8006802 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b10      	cmp	r3, #16
 8006844:	d103      	bne.n	800684e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2210      	movs	r2, #16
 800684c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fe fcf2 	bl	8005240 <HAL_UARTEx_RxEventCallback>
 800685c:	e002      	b.n	8006864 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fa f95c 	bl	8000b1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006864:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006868:	2b00      	cmp	r3, #0
 800686a:	d006      	beq.n	800687a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800686c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f aecb 	bne.w	8006610 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006880:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006884:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006888:	2b00      	cmp	r3, #0
 800688a:	d049      	beq.n	8006920 <UART_RxISR_16BIT_FIFOEN+0x358>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006892:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006896:	429a      	cmp	r2, r3
 8006898:	d242      	bcs.n	8006920 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	623b      	str	r3, [r7, #32]
   return(result);
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80068be:	633a      	str	r2, [r7, #48]	; 0x30
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e3      	bne.n	800689a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a15      	ldr	r2, [pc, #84]	; (800692c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80068d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f043 0320 	orr.w	r3, r3, #32
 80068ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	617b      	str	r3, [r7, #20]
   return(result);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e4      	bne.n	80068d8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800690e:	e007      	b.n	8006920 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0208 	orr.w	r2, r2, #8
 800691e:	619a      	str	r2, [r3, #24]
}
 8006920:	bf00      	nop
 8006922:	37b8      	adds	r7, #184	; 0xb8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40008000 	.word	0x40008000
 800692c:	080060b1 	.word	0x080060b1

08006930 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_UARTEx_DisableFifoMode+0x16>
 800697e:	2302      	movs	r3, #2
 8006980:	e027      	b.n	80069d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2224      	movs	r2, #36	; 0x24
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e02d      	b.n	8006a52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2224      	movs	r2, #36	; 0x24
 8006a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f850 	bl	8006ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e02d      	b.n	8006ace <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2224      	movs	r2, #36	; 0x24
 8006a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f812 	bl	8006ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006af8:	e031      	b.n	8006b5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006afa:	2308      	movs	r3, #8
 8006afc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006afe:	2308      	movs	r3, #8
 8006b00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	0e5b      	lsrs	r3, r3, #25
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	0f5b      	lsrs	r3, r3, #29
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	7b3a      	ldrb	r2, [r7, #12]
 8006b26:	4911      	ldr	r1, [pc, #68]	; (8006b6c <UARTEx_SetNbDataToProcess+0x94>)
 8006b28:	5c8a      	ldrb	r2, [r1, r2]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b2e:	7b3a      	ldrb	r2, [r7, #12]
 8006b30:	490f      	ldr	r1, [pc, #60]	; (8006b70 <UARTEx_SetNbDataToProcess+0x98>)
 8006b32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	7b7a      	ldrb	r2, [r7, #13]
 8006b44:	4909      	ldr	r1, [pc, #36]	; (8006b6c <UARTEx_SetNbDataToProcess+0x94>)
 8006b46:	5c8a      	ldrb	r2, [r1, r2]
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b4c:	7b7a      	ldrb	r2, [r7, #13]
 8006b4e:	4908      	ldr	r1, [pc, #32]	; (8006b70 <UARTEx_SetNbDataToProcess+0x98>)
 8006b50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	08007c58 	.word	0x08007c58
 8006b70:	08007c60 	.word	0x08007c60

08006b74 <memset>:
 8006b74:	4402      	add	r2, r0
 8006b76:	4603      	mov	r3, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <__libc_init_array>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	4d0d      	ldr	r5, [pc, #52]	; (8006bbc <__libc_init_array+0x38>)
 8006b88:	4c0d      	ldr	r4, [pc, #52]	; (8006bc0 <__libc_init_array+0x3c>)
 8006b8a:	1b64      	subs	r4, r4, r5
 8006b8c:	10a4      	asrs	r4, r4, #2
 8006b8e:	2600      	movs	r6, #0
 8006b90:	42a6      	cmp	r6, r4
 8006b92:	d109      	bne.n	8006ba8 <__libc_init_array+0x24>
 8006b94:	4d0b      	ldr	r5, [pc, #44]	; (8006bc4 <__libc_init_array+0x40>)
 8006b96:	4c0c      	ldr	r4, [pc, #48]	; (8006bc8 <__libc_init_array+0x44>)
 8006b98:	f000 f818 	bl	8006bcc <_init>
 8006b9c:	1b64      	subs	r4, r4, r5
 8006b9e:	10a4      	asrs	r4, r4, #2
 8006ba0:	2600      	movs	r6, #0
 8006ba2:	42a6      	cmp	r6, r4
 8006ba4:	d105      	bne.n	8006bb2 <__libc_init_array+0x2e>
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bac:	4798      	blx	r3
 8006bae:	3601      	adds	r6, #1
 8006bb0:	e7ee      	b.n	8006b90 <__libc_init_array+0xc>
 8006bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb6:	4798      	blx	r3
 8006bb8:	3601      	adds	r6, #1
 8006bba:	e7f2      	b.n	8006ba2 <__libc_init_array+0x1e>
 8006bbc:	08007c70 	.word	0x08007c70
 8006bc0:	08007c70 	.word	0x08007c70
 8006bc4:	08007c70 	.word	0x08007c70
 8006bc8:	08007c74 	.word	0x08007c74

08006bcc <_init>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr

08006bd8 <_fini>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	bf00      	nop
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr
